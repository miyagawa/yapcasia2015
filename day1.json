{"talks_by_venue":[[{"material_level":"beginner","subtitles":"ja","member_id":"1c5af0e4-f4b5-11e4-9741-1eb37d574c3a","start_on":"2015-08-21 09:45:00","created_on":"2015-05-09 10:10:04","category":"other","duration":"15","sort_order":"0","abstract":"Let the festivities begin!!","video_permission":"allow","title_en":"Opening","tags":null,"language":"ja","title":null,"is_confirmed":"1","calendar_entry_id":null,"venue_id":"1","speaker":{"name":"Daisuke Maki","profile_image_url":"http:\/\/pbs.twimg.com\/profile_images\/1223562029\/DSC00001_normal.JPG","id":"1c5af0e4-f4b5-11e4-9741-1eb37d574c3a","nickname":"lestrrat"},"status":"accepted","id":"1ffa6f7a-f5e8-11e4-a4ec-49b37d574c3a","slide_url":null,"photo_permission":"allow","video_url":null,"has_interpratation":"0","abstract_html":"<p>Let the festivities begin!!<\/p>\n","memo":null,"modified_on":"2015-05-09 10:10:04"},{"speaker":{"name":"Larry Wall","profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/162146?v=3","id":"9e47130c-0fbe-11e5-8a02-43ec7d574c3a","nickname":"TimToady"},"venue_id":"1","id":"a636430c-0fbf-11e5-8a02-43ec7d574c3a","status":"accepted","slide_url":null,"abstract_html":"<p>Ho, ho, ho!<\/p>\n\n<p>（編注：Perl6は今年のクリスマスのリリースに向けて準備中らしいですよ！）<\/p>\n","memo":null,"modified_on":"2015-06-11 07:25:50","photo_permission":"allow","video_url":null,"has_interpratation":"1","category":"other","sort_order":"0","duration":"60","abstract":"Ho, ho, ho!\r\n\r\n（編注：Perl6は今年のクリスマスのリリースに向けて準備中らしいですよ！）","material_level":"regular","subtitles":"ja","member_id":"9e47130c-0fbe-11e5-8a02-43ec7d574c3a","start_on":"2015-08-21 10:00:00","created_on":"2015-06-11 07:25:50","title":"メリークリスマス！","is_confirmed":"0","calendar_entry_id":null,"title_en":"Merry Christmas!","video_permission":"allow","tags":null,"language":"en"},{"calendar_entry_id":null,"is_confirmed":"1","title":null,"language":"en","tags":null,"video_permission":"allow","title_en":"Managing Containers at Scale with CoreOS and Kubernetes","abstract":"Linux containers provide the ability to reliably deploy thousands of application instances in seconds, but how do we manage it all? The answer is CoreOS and Kubernetes. This talk will help attendees wrap their minds around complex topics such as distributed configuration management, service discovery, and application scheduling at scale.","duration":"60","sort_order":"0","category":"infra","created_on":"2015-06-16 10:03:03","start_on":"2015-08-21 11:10:00","member_id":"2940c69c-13c0-11e5-82c7-2e007e574c3a","material_level":"regular","subtitles":"en","modified_on":"2015-06-16 09:51:53","memo":null,"abstract_html":"<p>Linux containers provide the ability to reliably deploy thousands of application instances in seconds, but how do we manage it all? The answer is CoreOS and Kubernetes. This talk will help attendees wrap their minds around complex topics such as distributed configuration management, service discovery, and application scheduling at scale.<\/p>\n","has_interpratation":"1","video_url":null,"photo_permission":"allow","slide_url":null,"status":"accepted","id":"e19fe827-13c1-11e5-aca1-525412004261","venue_id":"1","speaker":{"nickname":"kelseyhightower","id":"2940c69c-13c0-11e5-82c7-2e007e574c3a","profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/1123322?v=3","name":"Kelsey Hightower"}},{"venue_id":"1","speaker":{"nickname":"matz","id":"f72b3276-13c1-11e5-86a3-2e007e574c3a","name":"Yukihiro \"Matz\" Matsumoto","profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/30733?v=3"},"status":"accepted","id":"cc0ec485-1879-11e5-aca1-525412004261","slide_url":"https:\/\/drive.google.com\/open?id=0BwazarpZ-dOvNFAtOXZEcmQyblE","abstract_html":"<p>TBD<\/p>\n","memo":null,"modified_on":"2015-06-22 09:58:29","photo_permission":"allow","video_url":null,"has_interpratation":"0","category":"other","sort_order":"0","duration":"60","abstract":"TBD","material_level":"regular","subtitles":"none","member_id":"f72b3276-13c1-11e5-86a3-2e007e574c3a","start_on":"2015-08-21 13:10:00","created_on":"0000-00-00 00:00:00","title":"TBD","is_confirmed":"0","calendar_entry_id":null,"title_en":null,"video_permission":"allow","tags":null,"language":"ja"},{"tags":null,"language":"en","title_en":"Conway's Law of Distributed Work","video_permission":"allow","calendar_entry_id":null,"title":null,"is_confirmed":"0","start_on":"2015-08-21 14:20:00","created_on":"2015-06-08 10:13:53","subtitles":"none","material_level":"regular","member_id":"84a71206-fd50-11e4-ba13-bdc07d574c3a","abstract":"I have been working remotely for more than a decade. Half of that time has been in a technical leadership capacity. I often hear people say it's obviously harder to work remotely, and very hard to be in a leadership position remotely. My experience says otherwise, and I would like to share what I have learned to make remote work an effective strategy.\r\n\r\nThis is about being a remote worker or working on a distributed team. I am convinced this is the path software organizations are rightly headed, and I am determined to help you get there. I will present the tools and vocabulary to give you the confidence to try it.","category":"other","sort_order":"0","duration":"60","video_url":null,"has_interpratation":"1","photo_permission":"allow","modified_on":"2015-06-08 10:13:53","abstract_html":"<p>I have been working remotely for more than a decade. Half of that time has been in a technical leadership capacity. I often hear people say it's obviously harder to work remotely, and very hard to be in a leadership position remotely. My experience says otherwise, and I would like to share what I have learned to make remote work an effective strategy.<\/p>\n\n<p>This is about being a remote worker or working on a distributed team. I am convinced this is the path software organizations are rightly headed, and I am determined to help you get there. I will present the tools and vocabulary to give you the confidence to try it.<\/p>\n","memo":null,"slide_url":"https:\/\/speakerdeck.com\/caseywest\/conways-law-of-distributed-work","speaker":{"nickname":"cwest","id":"84a71206-fd50-11e4-ba13-bdc07d574c3a","profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/54422?v=3","name":"Casey West"},"venue_id":"1","status":"accepted","id":"a06d9970-0d7b-11e5-aaf9-67dc7d574c3a"},{"is_confirmed":"1","title":null,"calendar_entry_id":null,"video_permission":"allow","title_en":"Electron: Building desktop apps with web technologies","language":"en","tags":null,"duration":"30","sort_order":"0","category":"library","abstract":"This talk will be an overview to building Desktop apps with the Electron project. Electron underpins popular desktop apps like Atom, Slack, Visual Studio Code, and Mapbox Studio.\r\n\r\nThe talk is directed at anyone who has written code for the web. It will cover the following ground: \r\n\r\n* What is electron? Node + chromium = :D\r\n* Why did we build it?\r\n* What’s possible with electron?\r\n* What does an electron app look like?\r\n* Demo using perlito to build a small app\r\n* Demo of a larger app with a little live coding\r\n* Jokes\r\n\r\n#### Links!\r\n\r\n* http:\/\/electron.atom.io\/\r\n* https:\/\/github.com\/fglock\/Perlito\/\r\n* A deeper technical set of slides on Electron (formerly atom-shell) https:\/\/speakerdeck.com\/zcbenz\/practice-on-embedding-node-dot-js-into-atom-editor\r\n","member_id":"852e4a32-0a66-11e5-9c35-67dc7d574c3a","subtitles":"ja","material_level":"beginner","created_on":"2015-06-04 12:40:48","start_on":"2015-08-21 15:30:00","memo":"Full disclosure: I am on the GitHub Electron \/ Atom team. \r\n\r\nThis talk could be expanded to 60 minutes with more examples showcasing all the fun features of Electron.","abstract_html":"<p>This talk will be an overview to building Desktop apps with the Electron project. Electron underpins popular desktop apps like Atom, Slack, Visual Studio Code, and Mapbox Studio.<\/p>\n\n<p>The talk is directed at anyone who has written code for the web. It will cover the following ground: <\/p>\n\n<ul>\n<li>What is electron? Node + chromium = :D<\/li>\n<li>Why did we build it?<\/li>\n<li>What’s possible with electron?<\/li>\n<li>What does an electron app look like?<\/li>\n<li>Demo using perlito to build a small app<\/li>\n<li>Demo of a larger app with a little live coding<\/li>\n<li>Jokes<\/li>\n<\/ul>\n\n<h4>Links!<\/h4>\n\n<ul>\n<li>http:\/\/electron.atom.io\/<\/li>\n<li>https:\/\/github.com\/fglock\/Perlito\/<\/li>\n<li>A deeper technical set of slides on Electron (formerly atom-shell) https:\/\/speakerdeck.com\/zcbenz\/practice-on-embedding-node-dot-js-into-atom-editor<\/li>\n<\/ul>\n","modified_on":"2015-06-04 12:40:48","photo_permission":"allow","has_interpratation":"1","video_url":null,"id":"7d66b640-0a6b-11e5-b1a0-67dc7d574c3a","status":"accepted","speaker":{"profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/69169?v=3","name":"Ben Ogle","id":"852e4a32-0a66-11e5-9c35-67dc7d574c3a","nickname":"benogle"},"venue_id":"1","slide_url":null},{"calendar_entry_id":null,"is_confirmed":"1","title":" esa.io - 趣味から育てたWebサービスで生きていく","language":"ja","tags":null,"video_permission":"allow","title_en":null,"abstract":"「[esa](https:\/\/esa.io\/)」は [esa LLC](https:\/\/team.esa.io\/) が開発・運営しているチーム向けMarkdownドキュメント共有サービスです。2015年1月に正式リリースされてから約半年、βテスト期間も含めると1年ほどになります。\r\n\r\n本トークではエンジニア1人とデザイナー1人で開発・運営・経営・営業などを行う上で考えたこと、経験したことなどを中心に、オフの時間に趣味で作り始めたWebサービスを事業化することについてお話したいと考えています。\r\n\r\n## 発表内容(予定)\r\n\r\n- 私は誰?\r\n- esa LLC とは\r\n- esa.io について\r\n- この発表はこんな人におすすめ\r\n    - 趣味のようにプロダクトを作って生活していきたい人\r\n    - esa.io の中のひとの考え方に興味があるひと\r\n    - トリが好きな人 (\\\\( ⁰⊖⁰)\/)\r\n- Before esa\r\n    - お仕事でいろいろ\r\n    - 趣味でいろいろ\r\n    - いろいろやってたらいろんな人々に出会った\r\n        - ポエム界隈 #とは\r\n    - いろいろ試すの、大事\r\n- Beginning of esa\r\n    - 某サービスの試用期限が切れた\r\n    - 毎日がハッカソン状態\r\n    - 毎日ドックフーディング\r\n    - 知人の会社が使ってくれることに\r\n    - 会社にした\r\n    - オープンβでの反省\r\n    - esaじゃないほうの会社をやめた\r\n- How to develop esa\r\n    - 楽しく開発したい！！\r\n        - ...しかし楽しさ自体はコントロールできない\r\n    - やれることを、やる\r\n    - 毎日 Auto Bundle Update\r\n    - 小さく作る・素早く試す\r\n    - Bug Fix タイムアタック\r\n    - フィードバック駆動開発\r\n    - 心からのドックフーディング\r\n    - よく寝る( ˘ω˘)\r\n    - We're Not Hiring\r\n    - Herokuを使う\r\n    - リリースノート駆動開発\r\n    - 開発スケジュールを決めない\r\n    - かわいみ\r\n        - Tシャツ\r\n        - ステッカー\r\n        - twitter.com\/esa_io\r\n- ﾌﾘｶｴﾘ\r\n    - 5年前の日記\r\n    - Re: 5年前の日記\r\n    - 試行錯誤しよう\r\n- まとめ\r\n\r\n","sort_order":"0","duration":"30","category":"other","created_on":"2015-06-04 18:04:50","start_on":"2015-08-21 16:00:00","member_id":"d1b678dc-0a86-11e5-924b-67dc7d574c3a","material_level":"beginner","subtitles":"ja","modified_on":"2015-06-04 18:04:50","memo":null,"abstract_html":"<p>「<a href=\"https:\/\/esa.io\/\">esa<\/a>」は <a href=\"https:\/\/team.esa.io\/\">esa LLC<\/a> が開発・運営しているチーム向けMarkdownドキュメント共有サービスです。2015年1月に正式リリースされてから約半年、βテスト期間も含めると1年ほどになります。<\/p>\n\n<p>本トークではエンジニア1人とデザイナー1人で開発・運営・経営・営業などを行う上で考えたこと、経験したことなどを中心に、オフの時間に趣味で作り始めたWebサービスを事業化することについてお話したいと考えています。<\/p>\n\n<h2>発表内容(予定)<\/h2>\n\n<ul>\n<li>私は誰?<\/li>\n<li>esa LLC とは<\/li>\n<li>esa.io について<\/li>\n<li>この発表はこんな人におすすめ\n<ul>\n<li>趣味のようにプロダクトを作って生活していきたい人<\/li>\n<li>esa.io の中のひとの考え方に興味があるひと<\/li>\n<li>トリが好きな人 (\\( ⁰⊖⁰)\/)<\/li>\n<\/ul><\/li>\n<li>Before esa\n<ul>\n<li>お仕事でいろいろ<\/li>\n<li>趣味でいろいろ<\/li>\n<li>いろいろやってたらいろんな人々に出会った\n<ul>\n<li>ポエム界隈 #とは<\/li>\n<\/ul><\/li>\n<li>いろいろ試すの、大事<\/li>\n<\/ul><\/li>\n<li>Beginning of esa\n<ul>\n<li>某サービスの試用期限が切れた<\/li>\n<li>毎日がハッカソン状態<\/li>\n<li>毎日ドックフーディング<\/li>\n<li>知人の会社が使ってくれることに<\/li>\n<li>会社にした<\/li>\n<li>オープンβでの反省<\/li>\n<li>esaじゃないほうの会社をやめた<\/li>\n<\/ul><\/li>\n<li>How to develop esa\n<ul>\n<li>楽しく開発したい！！\n<ul>\n<li>...しかし楽しさ自体はコントロールできない<\/li>\n<\/ul><\/li>\n<li>やれることを、やる<\/li>\n<li>毎日 Auto Bundle Update<\/li>\n<li>小さく作る・素早く試す<\/li>\n<li>Bug Fix タイムアタック<\/li>\n<li>フィードバック駆動開発<\/li>\n<li>心からのドックフーディング<\/li>\n<li>よく寝る( ˘ω˘)<\/li>\n<li>We're Not Hiring<\/li>\n<li>Herokuを使う<\/li>\n<li>リリースノート駆動開発<\/li>\n<li>開発スケジュールを決めない<\/li>\n<li>かわいみ\n<ul>\n<li>Tシャツ<\/li>\n<li>ステッカー<\/li>\n<li>twitter.com\/esa_io<\/li>\n<\/ul><\/li>\n<\/ul><\/li>\n<li>ﾌﾘｶｴﾘ\n<ul>\n<li>5年前の日記<\/li>\n<li>Re: 5年前の日記<\/li>\n<li>試行錯誤しよう<\/li>\n<\/ul><\/li>\n<li>まとめ<\/li>\n<\/ul>\n","has_interpratation":"0","video_url":null,"photo_permission":"allow","slide_url":"https:\/\/speakerdeck.com\/fukayatsu\/esa-dot-io-qu-wei-karayu-tetawebsabisudesheng-kiteiku","status":"accepted","id":"c191c08a-0a98-11e5-be34-67dc7d574c3a","venue_id":"1","speaker":{"id":"d1b678dc-0a86-11e5-924b-67dc7d574c3a","profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/1041857?v=3","name":"Atsuo Fukaya","nickname":"fukayatsu"}},{"modified_on":"2015-06-22 09:02:53","memo":null,"abstract_html":"<p>YAPC::Asia Tokyo 2015の花形、Lightning Talk です！<\/p>\n","has_interpratation":"0","video_url":null,"photo_permission":"allow","slide_url":null,"id":"22957e9c-1872-11e5-aca1-525412004261","status":"accepted","speaker":{"id":"1c5af0e4-f4b5-11e4-9741-1eb37d574c3a","profile_image_url":"http:\/\/pbs.twimg.com\/profile_images\/1223562029\/DSC00001_normal.JPG","name":"Daisuke Maki","nickname":"lestrrat"},"venue_id":"1","calendar_entry_id":null,"is_confirmed":"1","title":null,"language":"ja","tags":null,"title_en":"Lightning Talks Day 1","video_permission":"allow","abstract":"YAPC::Asia Tokyo 2015の花形、Lightning Talk です！","duration":"60","sort_order":"0","category":"other","created_on":"0000-00-00 00:00:00","start_on":"2015-08-21 16:40:00","member_id":"1c5af0e4-f4b5-11e4-9741-1eb37d574c3a","subtitles":"none","material_level":"beginner"}],[{"photo_permission":"allow","video_url":null,"has_interpratation":"0","abstract_html":"<p>昨今 Deep Learning がもてはやされていますが、その前にパーセプトロンだけではなく、私が研究で利用してきた下記のようなニューラルネットワークについて紹介したいと思います。<\/p>\n\n<ul>\n<li>再帰的ニューラルネットワーク：\n<ul>\n<li>系列学習を可能にするニューラルネットワークの形式の1つです。<\/li>\n<li>また、学習方式の一つとして予測学習を紹介します\n<ul>\n<li>特に <a href=\"http:\/\/en.wikipedia.org\/wiki\/Recurrent_neural_network#Elman_networks_and_Jordan_networks\">Elman Network<\/a> についてお話します<\/li>\n<\/ul><\/li>\n<\/ul><\/li>\n<li><a href=\"http:\/\/en.wikipedia.org\/wiki\/Self-organizing_map\">自己組織化マップ<\/a>：\n<ul>\n<li>セルの近接性が学習に影響をおよぼすネットワークアーキテクチャのニューラルネットワークです。<\/li>\n<\/ul><\/li>\n<\/ul>\n\n<p>上記を知った上で Deep Learning を適用することで更に様々な分野への適用などを考えられるのではないでしょうか。<\/p>\n","memo":"21日(金)の発表が助かります。","modified_on":"2015-05-19 13:10:13","venue_id":"2","speaker":{"id":"9302eb3c-f764-11e4-b0ac-8ab37d574c3a","profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/10035?v=3","name":"muddydixon","nickname":"muddydixon"},"id":"f283a924-fddc-11e4-90cd-bdc07d574c3a","status":"accepted","slide_url":null,"video_permission":"allow","title_en":"Let's talk about recurrent neural network and self-organizing before deep learning!","tags":null,"language":"ja","title":"DeepLearning の前に知っておくことがある！ 再帰型のニューラルネットワークや自己組織化マップについて語ろう","is_confirmed":"1","calendar_entry_id":null,"material_level":"regular","subtitles":"ja","member_id":"9302eb3c-f764-11e4-b0ac-8ab37d574c3a","start_on":"2015-08-21 11:10:00","created_on":"2015-05-19 13:10:13","category":"other","sort_order":"0","duration":"30","abstract":"昨今 Deep Learning がもてはやされていますが、その前にパーセプトロンだけではなく、私が研究で利用してきた下記のようなニューラルネットワークについて紹介したいと思います。\r\n\r\n* 再帰的ニューラルネットワーク：\r\n    * 系列学習を可能にするニューラルネットワークの形式の1つです。\r\n    * また、学習方式の一つとして予測学習を紹介します\r\n        * 特に [Elman Network](http:\/\/en.wikipedia.org\/wiki\/Recurrent_neural_network#Elman_networks_and_Jordan_networks) についてお話します\r\n* [自己組織化マップ](http:\/\/en.wikipedia.org\/wiki\/Self-organizing_map)：\r\n    * セルの近接性が学習に影響をおよぼすネットワークアーキテクチャのニューラルネットワークです。\r\n\r\n上記を知った上で Deep Learning を適用することで更に様々な分野への適用などを考えられるのではないでしょうか。"},{"modified_on":"2015-05-13 09:28:00","abstract_html":"<p>はじめまして、こんにちは！<a href=\"https:\/\/twitter.com\/jigyakkuma_\">jigyakkuma<\/a>です！！！！！１ <br \/>\nInfrastructure as Codeが叫ばれる昨今、ドメインやDNS管理・運用にもその波が押し寄せておりますが皆様いかがお過ごしでしょうか。  <\/p>\n\n<p>私が所属している<a href=\"http:\/\/www.kayac.com\">組織<\/a>では取り扱うドメイン・DNSの数が比較的多く、管理・運用でのベストプラクティスを日夜模索しながら改善を行っている状況です。 <br \/>\n運用や管理といった分野は各社のエンジニアや担当者がそれぞれ構築した仕組みやルールで運用を行ってはいるが、ノウハウの共有や知見を得る機会があまりないと感じております。 <br \/>\n会社で所有しているドメインやDNSについて運用の手間やトラブルなどでお困りの方も、もしかすると多いのではないでしょうか。  <\/p>\n\n<p>本トークではドメイン登録代行サービスを使用した人力による運用を経て<a href=\"http:\/\/aws.amazon.com\/jp\/route53\/\">AWS Route53<\/a>にドメイン・DNSを集約するまでの背景やメリット、注意点を中心に会社としてどのように管理・運用するのがよいかを実例を交えてお話しいたします。 <br \/>\n実体験や失敗談を時系列で追うことにより、皆様のお困りの点や今度どのようにするのがいいかなどの参考になればと思います。 <br \/>\nまた、組織×運用×仕組みといった技術以外のところについても触れながら、ドメイン・DNSをどのように管理・運用するのがよいのかを考察したいと思います。  <\/p>\n\n<h2>トークテーマ（予定）<\/h2>\n\n<ul>\n<li>ドメイン・DNS管理\/運用の変移<\/li>\n<li><a href=\"http:\/\/aws.amazon.com\/jp\/route53\/\">AWS Route53<\/a>へドメイン・DNS管理の集約<\/li>\n<li><a href=\"http:\/\/aws.amazon.com\/jp\/route53\/\">AWS Route53<\/a>へのドメイン移管<\/li>\n<li><a href=\"https:\/\/github.com\/winebarrel\/roadworker\">roadworker<\/a>によるDNS管理への移行<\/li>\n<li>CIによる<a href=\"https:\/\/github.com\/winebarrel\/roadworker\">roadworker<\/a>の自動化<\/li>\n<li>組織×運用×仕組みから見るドメイン・DNS管理<\/li>\n<li>事故った事例やトラブル<\/li>\n<\/ul>\n\n<p>webサービスに携わるエンジニアの方々には広く知っていただきたい内容であるとは思いますが、特に以下に該当するような方に向けた内容とする予定としております。<\/p>\n\n<h2>想定する対象者<\/h2>\n\n<ul>\n<li>ドメインやDNSについてなんとなく知っている方・興味のある方<\/li>\n<li>業務やプライベートでドメインやDNSの管理に関わっている方<\/li>\n<li>ドメイン・DNSの管理でお困りの方<\/li>\n<li>他社のドメイン・DNS管理のノウハウを知りたい方<\/li>\n<\/ul>\n\n<p>また、この辺りのノウハウを共有させていただきつつ皆様の運用テクニックなどの情報交換が出来ればと考えております。<\/p>\n","memo":null,"video_url":null,"has_interpratation":"0","photo_permission":"allow","slide_url":"https:\/\/docs.google.com\/presentation\/d\/1NO0j91NBwoiB-EuwERzEVDktvSciQjBFWe0gCifx-I8\/pub?start=false&loop=false&delayms=3000","venue_id":"2","speaker":{"name":"jigyakkuma","profile_image_url":"http:\/\/pbs.twimg.com\/profile_images\/599475415766302720\/IrXs2kkC_normal.png","id":"eeb01100-f76c-11e4-aee6-8ab37d574c3a","nickname":"jigyakkuma_"},"status":"accepted","id":"e8eebd70-f906-11e4-8f91-8ab37d574c3a","calendar_entry_id":null,"title":"それは僕たちのドメイン・DNS運用","is_confirmed":"1","tags":null,"language":"ja","title_en":null,"video_permission":"allow","abstract":"はじめまして、こんにちは！[jigyakkuma](https:\/\/twitter.com\/jigyakkuma_)です！！！！！１  \r\nInfrastructure as Codeが叫ばれる昨今、ドメインやDNS管理・運用にもその波が押し寄せておりますが皆様いかがお過ごしでしょうか。  \r\n  \r\n私が所属している[組織](http:\/\/www.kayac.com)では取り扱うドメイン・DNSの数が比較的多く、管理・運用でのベストプラクティスを日夜模索しながら改善を行っている状況です。   \r\n運用や管理といった分野は各社のエンジニアや担当者がそれぞれ構築した仕組みやルールで運用を行ってはいるが、ノウハウの共有や知見を得る機会があまりないと感じております。  \r\n会社で所有しているドメインやDNSについて運用の手間やトラブルなどでお困りの方も、もしかすると多いのではないでしょうか。  \r\n\r\n本トークではドメイン登録代行サービスを使用した人力による運用を経て[AWS Route53](http:\/\/aws.amazon.com\/jp\/route53\/)にドメイン・DNSを集約するまでの背景やメリット、注意点を中心に会社としてどのように管理・運用するのがよいかを実例を交えてお話しいたします。  \r\n実体験や失敗談を時系列で追うことにより、皆様のお困りの点や今度どのようにするのがいいかなどの参考になればと思います。  \r\nまた、組織×運用×仕組みといった技術以外のところについても触れながら、ドメイン・DNSをどのように管理・運用するのがよいのかを考察したいと思います。  \r\n\r\n\r\n## トークテーマ（予定）\r\n- ドメイン・DNS管理\/運用の変移\r\n- [AWS Route53](http:\/\/aws.amazon.com\/jp\/route53\/)へドメイン・DNS管理の集約\r\n- [AWS Route53](http:\/\/aws.amazon.com\/jp\/route53\/)へのドメイン移管\r\n- [roadworker](https:\/\/github.com\/winebarrel\/roadworker)によるDNS管理への移行\r\n- CIによる[roadworker](https:\/\/github.com\/winebarrel\/roadworker)の自動化\r\n- 組織×運用×仕組みから見るドメイン・DNS管理\r\n- 事故った事例やトラブル\r\n  \r\nwebサービスに携わるエンジニアの方々には広く知っていただきたい内容であるとは思いますが、特に以下に該当するような方に向けた内容とする予定としております。\r\n\r\n## 想定する対象者\r\n- ドメインやDNSについてなんとなく知っている方・興味のある方\r\n- 業務やプライベートでドメインやDNSの管理に関わっている方\r\n- ドメイン・DNSの管理でお困りの方\r\n- 他社のドメイン・DNS管理のノウハウを知りたい方\r\n\r\nまた、この辺りのノウハウを共有させていただきつつ皆様の運用テクニックなどの情報交換が出来ればと考えております。","category":"infra","duration":"30","sort_order":"0","start_on":"2015-08-21 11:40:00","created_on":"2015-05-13 09:28:00","material_level":"beginner","subtitles":"ja","member_id":"eeb01100-f76c-11e4-aee6-8ab37d574c3a"},{"abstract":"ここ最近のフロントエンドに対しては、\r\n\r\n------------\r\n\r\n* 流れが速すぎてついていけない\r\n* あるライブラリを使おうと思ったら今はみんな別のライブラリを使ってると言われてもう何を使えばいいかわからない\r\n* ビルドするのが当たり前になっていて、HTML\/CSS\/JavaScriptを少し修正したいだけなのにどうすればいいのかわからない\r\n* importやclassなど自分の知っているJavaScriptでない\r\n* せっかく覚えても半年後には使えない知識になっている\r\n\r\n------------\r\n\r\nという意見を聞きます。果たしてそうでしょうか？\r\n\r\nそこで本トークでは、サーバーサイドをメインで書いている人に向けてフロントエンドの今をいくつかのトピックに分けて解説します。\r\n\r\n例外もありますが、新しいライブラリは突然何の脈絡もなく登場したわけではなくそれまでの流れを踏まえて登場しています。\r\n\r\n本トークでは、個々のライブラリの使い方紹介ではなく、その背景や目的などに注目することで、 **点** ではなく **線** でフロントエンドの流れを掴めるようにしたいと思います。\r\nそれによって今後新しい何かが登場した場合にもその意味が捉えられやすくなるのではと考えています。\r\n\r\n変更の可能性はありますがトピックは下記のような内容を想定しています。それぞれが「なぜ生まれたのか」、「何を解決しようとしているのか」を解説します。\r\n\r\n------------\r\n\r\n* JavaScript Framework(library)\r\n* Isomorphic\r\n* Functional Reactive programming\r\n* Build tools\r\n* ES6, types, AST\r\n* Service Worker\r\n\r\n------------\r\n  \r\nフロントエンドは別のエンジニアがいるから関係ないと思うかもしれませんが、フロントエンドでは何が出来るのか・何が問題なのかを把握しておくことはアプリケーションの設計やサーバーサイドの開発においてもきっと役に立つはずです。","duration":"60","sort_order":"0","category":"library","created_on":"2015-05-15 23:49:24","start_on":"2015-08-21 13:10:00","member_id":"37cd6d7e-f6be-11e4-b174-8ab37d574c3a","subtitles":"en","material_level":"regular","calendar_entry_id":null,"is_confirmed":"1","title":"今フロントエンドで何が起こっているのか","language":"ja","tags":null,"video_permission":"allow","title_en":"What's happening in frontend now?","slide_url":"https:\/\/speakerdeck.com\/koba04\/whats-happening-in-frontend-now\/","id":"94051590-fb11-11e4-a39d-8ab37d574c3a","status":"accepted","venue_id":"2","speaker":{"profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/250407?v=3","name":"Toru Kobayashi","id":"37cd6d7e-f6be-11e4-b174-8ab37d574c3a","nickname":"koba04"},"modified_on":"2015-05-15 23:49:24","memo":null,"abstract_html":"<p>ここ最近のフロントエンドに対しては、<\/p>\n\n<hr \/>\n\n<ul>\n<li>流れが速すぎてついていけない<\/li>\n<li>あるライブラリを使おうと思ったら今はみんな別のライブラリを使ってると言われてもう何を使えばいいかわからない<\/li>\n<li>ビルドするのが当たり前になっていて、HTML\/CSS\/JavaScriptを少し修正したいだけなのにどうすればいいのかわからない<\/li>\n<li>importやclassなど自分の知っているJavaScriptでない<\/li>\n<li>せっかく覚えても半年後には使えない知識になっている<\/li>\n<\/ul>\n\n<hr \/>\n\n<p>という意見を聞きます。果たしてそうでしょうか？<\/p>\n\n<p>そこで本トークでは、サーバーサイドをメインで書いている人に向けてフロントエンドの今をいくつかのトピックに分けて解説します。<\/p>\n\n<p>例外もありますが、新しいライブラリは突然何の脈絡もなく登場したわけではなくそれまでの流れを踏まえて登場しています。<\/p>\n\n<p>本トークでは、個々のライブラリの使い方紹介ではなく、その背景や目的などに注目することで、 <strong>点<\/strong> ではなく <strong>線<\/strong> でフロントエンドの流れを掴めるようにしたいと思います。\nそれによって今後新しい何かが登場した場合にもその意味が捉えられやすくなるのではと考えています。<\/p>\n\n<p>変更の可能性はありますがトピックは下記のような内容を想定しています。それぞれが「なぜ生まれたのか」、「何を解決しようとしているのか」を解説します。<\/p>\n\n<hr \/>\n\n<ul>\n<li>JavaScript Framework(library)<\/li>\n<li>Isomorphic<\/li>\n<li>Functional Reactive programming<\/li>\n<li>Build tools<\/li>\n<li>ES6, types, AST<\/li>\n<li>Service Worker<\/li>\n<\/ul>\n\n<hr \/>\n\n<p>フロントエンドは別のエンジニアがいるから関係ないと思うかもしれませんが、フロントエンドでは何が出来るのか・何が問題なのかを把握しておくことはアプリケーションの設計やサーバーサイドの開発においてもきっと役に立つはずです。<\/p>\n","has_interpratation":"0","video_url":null,"photo_permission":"allow"},{"venue_id":"2","speaker":{"nickname":"cho45","id":"6df9754c-f794-11e4-99f0-8ab37d574c3a","name":"cho45","profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/3092?v=3"},"id":"c61a32a4-f797-11e4-bcef-8ab37d574c3a","status":"accepted","slide_url":"https:\/\/docs.google.com\/presentation\/d\/1mLH9yS8ZChMKRGjBvy8xt3blSh_Ejjl8Ww-XfKzJUf8\/pub?start=false&loop=false&delayms=3000","photo_permission":"allow","video_url":null,"has_interpratation":"0","abstract_html":"<h3>WebAudio によるコネクティビティの向上<\/h3>\n\n<p>WebAudio はウェブの世界では数少ない、リアル世界との接続方法を提供する技術の一つである。<\/p>\n\n<p>ウェブから「ディスプレイに何かを表示する」以外の方法で、出力するだけならば何らかのユーザ同意をとることもなく、直接リアル世界と繋がると考えると、貴重な技術である。<\/p>\n\n<p>本セッションでは WebAudio を用いてモデムの実装をしながら、音声帯域の通信信号処理について簡単な紹介をしたい。<\/p>\n\n<h3>概要<\/h3>\n\n<ul>\n<li>WebAudio とは?\n-- WebAudio の概念(AudioNode \/ connect などの簡単な説明)<\/li>\n<li>特殊なノード AnalyserNode, ScriptProcessorNode<\/li>\n<li>getMedia によるマイク音声入力<\/li>\n<li>音声帯域での通信\n-- 電話回線モデムのプロトコルは?<\/li>\n<li>変調\/復調とは?\n-- 原始的な変調方式<\/li>\n<li>エラー訂正<\/li>\n<li>昨今のトピック・技術的課題\n-- 超高音 (16kHz〜) 通信<\/li>\n<\/ul>\n\n<h3>喋ろうとしている\/喋るかもしれないキーワード:<\/h3>\n\n<ul>\n<li>WebAudio ScriptProcessorNode<\/li>\n<li>WebAudio のデバッグ方法・バッドノウハウ<\/li>\n<li>AnalyserNode はどこまで使えるか?<\/li>\n<li>変調\/復調<\/li>\n<li>変調方式 (OOK, FSK, ASK, PSK)<\/li>\n<li>エラー訂正<\/li>\n<li>IoT との連携 (バッテリーなしデバイス)<\/li>\n<\/ul>\n\n<h3>想定観客層<\/h3>\n\n<ul>\n<li>ウェブエンジニア<\/li>\n<li>WebAudio を音楽鳴らせるだけだと思ってる人<\/li>\n<li>WebAudio を触ったこともない人<\/li>\n<\/ul>\n","memo":null,"modified_on":"2015-05-11 13:39:56","subtitles":"ja","material_level":"regular","member_id":"6df9754c-f794-11e4-99f0-8ab37d574c3a","start_on":"2015-08-21 14:20:00","created_on":"2015-05-11 13:39:56","category":"tutorial","duration":"60","sort_order":"0","abstract":"### WebAudio によるコネクティビティの向上\r\n\r\nWebAudio はウェブの世界では数少ない、リアル世界との接続方法を提供する技術の一つである。\r\n\r\nウェブから「ディスプレイに何かを表示する」以外の方法で、出力するだけならば何らかのユーザ同意をとることもなく、直接リアル世界と繋がると考えると、貴重な技術である。\r\n\r\n本セッションでは WebAudio を用いてモデムの実装をしながら、音声帯域の通信信号処理について簡単な紹介をしたい。\r\n\r\n### 概要\r\n\r\n- WebAudio とは?\r\n-- WebAudio の概念(AudioNode \/ connect などの簡単な説明)\r\n- 特殊なノード AnalyserNode, ScriptProcessorNode\r\n- getMedia によるマイク音声入力\r\n- 音声帯域での通信\r\n-- 電話回線モデムのプロトコルは?\r\n- 変調\/復調とは?\r\n-- 原始的な変調方式\r\n- エラー訂正\r\n- 昨今のトピック・技術的課題\r\n-- 超高音 (16kHz〜) 通信\r\n\r\n### 喋ろうとしている\/喋るかもしれないキーワード:\r\n\r\n- WebAudio ScriptProcessorNode\r\n- WebAudio のデバッグ方法・バッドノウハウ\r\n- AnalyserNode はどこまで使えるか?\r\n- 変調\/復調\r\n- 変調方式 (OOK, FSK, ASK, PSK)\r\n- エラー訂正\r\n- IoT との連携 (バッテリーなしデバイス)\r\n\r\n\r\n### 想定観客層\r\n\r\n- ウェブエンジニア\r\n- WebAudio を音楽鳴らせるだけだと思ってる人\r\n- WebAudio を触ったこともない人","title_en":null,"video_permission":"allow","tags":null,"language":"ja","title":"WebAudio で入門する信号処理","is_confirmed":"1","calendar_entry_id":null},{"slide_url":"http:\/\/www.slideshare.net\/moznion\/yet-another-perl-cooking","venue_id":"2","speaker":{"nickname":"moznion","id":"421af20c-0c75-11e5-b65f-67dc7d574c3a","name":"moznion","profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/1422834?v=3"},"status":"accepted","id":"bb82c8fc-12a3-11e5-962e-d9f87d574c3a","modified_on":"2015-06-14 23:43:33","abstract_html":"<p>Perl (あるいは他の言語) を用いて料理・調理を自動化するという話をします． <br \/>\n料理は時間と手間がかかる営みですから，21世紀に生活する我々はこれを可能な限り自動化していく必要があります．<\/p>\n\n<h2>話す内容<\/h2>\n\n<p>2015年はプログラミング料理界にとって本当にエポックメーキングな年となっています．私は大変興奮しています！<\/p>\n\n<p>皆さんは <a href=\"http:\/\/www.nomiku.com\/\">nomiku<\/a>というデバイスをご存知でしょうか．nomiku は簡単に言うと，鍋に装着して使う料理器具で鍋の中の温度を一定に保ってくれるというデバイスとなっています．これにより，人間が火加減を逐一確かめて調節するという手間を省き，機械に調理を任せることが可能となります．<\/p>\n\n<p>そして2015年，nomiku は更なる進化を遂げました．Wi-Fi を介して操作できる <a href=\"http:\/\/www.nomiku.com\/collections\/featured\/products\/wifi-nomiku\">nomiku WiFi<\/a> が登場したのです． <br \/>\nこのモデルは nomiku を遠隔地から操作するという機能を提供しているだけではなく，なんと <strong>Web API の利用<\/strong> もサポートしています (しかもオープンソース！)．nomiku 自体がサーバとなり，調理の為の Web アプリケーションを提供しているというイメージです．<\/p>\n\n<p>さらりと書きましたが，これはすさまじい事です！　API を利用して料理をすることが可能な時代が到来しているのです！　ワクワクするでしょう！ <br \/>\n日頃人間がこまめに様子を見ながら「この状態になったら弱火にする」などといった風にしている操作を，「状況に応じて適宜 API を叩く」というコードを書くことで自動化することが可能となるのです． <br \/>\nさらに言えば，これはつまり「ソースコードを共有することで料理のレシピを共有出来る」「レシピの再現性が著しく向上する」という時代がすぐそこまで来ている事を意味しています！<\/p>\n\n<p>本トークではそうした <strong>Web API を用いた料理・調理の自動化<\/strong> が秘める可能性について，サンプルコードに Perl を使いながら発表したいと考えています．その実例として Perl を用いてローストビーフを自動化する事例を紹介予定です． <br \/>\nまた，nomiku は「煮る」という単一の調理方法しかサポートしていませんが，そこから一歩踏み込んで「焼く」「揚げる」「蒸す」といった他の調理方法に関して自動化を応用する事についても議論したいと思います． <br \/>\n更なる応用として，crontab や CI などと組み合わせる事で生じる料理の自動化の広がりについても模索する予定です．<\/p>\n\n<p>併せて，Arduino あるいはそれに準ずるデバイスを用いて nomiku クローンを実装する話についてもお話できればと考えています．<\/p>\n","memo":null,"video_url":null,"has_interpratation":"0","photo_permission":"allow","abstract":"Perl (あるいは他の言語) を用いて料理・調理を自動化するという話をします．  \r\n料理は時間と手間がかかる営みですから，21世紀に生活する我々はこれを可能な限り自動化していく必要があります．\r\n\r\n## 話す内容\r\n\r\n2015年はプログラミング料理界にとって本当にエポックメーキングな年となっています．私は大変興奮しています！\r\n\r\n皆さんは [nomiku](http:\/\/www.nomiku.com\/)というデバイスをご存知でしょうか．nomiku は簡単に言うと，鍋に装着して使う料理器具で鍋の中の温度を一定に保ってくれるというデバイスとなっています．これにより，人間が火加減を逐一確かめて調節するという手間を省き，機械に調理を任せることが可能となります．\r\n\r\nそして2015年，nomiku は更なる進化を遂げました．Wi-Fi を介して操作できる [nomiku WiFi](http:\/\/www.nomiku.com\/collections\/featured\/products\/wifi-nomiku) が登場したのです．  \r\nこのモデルは nomiku を遠隔地から操作するという機能を提供しているだけではなく，なんと __Web API の利用__ もサポートしています (しかもオープンソース！)．nomiku 自体がサーバとなり，調理の為の Web アプリケーションを提供しているというイメージです．\r\n\r\nさらりと書きましたが，これはすさまじい事です！　API を利用して料理をすることが可能な時代が到来しているのです！　ワクワクするでしょう！  \r\n日頃人間がこまめに様子を見ながら「この状態になったら弱火にする」などといった風にしている操作を，「状況に応じて適宜 API を叩く」というコードを書くことで自動化することが可能となるのです．  \r\nさらに言えば，これはつまり「ソースコードを共有することで料理のレシピを共有出来る」「レシピの再現性が著しく向上する」という時代がすぐそこまで来ている事を意味しています！\r\n\r\n本トークではそうした __Web API を用いた料理・調理の自動化__ が秘める可能性について，サンプルコードに Perl を使いながら発表したいと考えています．その実例として Perl を用いてローストビーフを自動化する事例を紹介予定です．  \r\nまた，nomiku は「煮る」という単一の調理方法しかサポートしていませんが，そこから一歩踏み込んで「焼く」「揚げる」「蒸す」といった他の調理方法に関して自動化を応用する事についても議論したいと思います．  \r\n更なる応用として，crontab や CI などと組み合わせる事で生じる料理の自動化の広がりについても模索する予定です．\r\n\r\n併せて，Arduino あるいはそれに準ずるデバイスを用いて nomiku クローンを実装する話についてもお話できればと考えています．","category":"other","duration":"30","sort_order":"0","start_on":"2015-08-21 15:30:00","created_on":"2015-06-14 23:43:33","material_level":"beginner","subtitles":"en","member_id":"421af20c-0c75-11e5-b65f-67dc7d574c3a","calendar_entry_id":null,"title":"Yet Another Perl Cooking","is_confirmed":"1","tags":null,"language":"ja","video_permission":"allow","title_en":"Yet Another Perl Cooking"},{"abstract":"最近は microservices という言葉がバズっていますが、これから Web サービスの開発を始める人にとってみたら「 microservices ってなに？おいしいの？それって僕らの作りたい物にも役に立つの？」と思っている人が多いとおもいます。\r\n\r\n実は、私は昔からこのアーキテクチャに基づいた考え方で数多くのサービスを作り運用してきました。それらの知見を多くの方々の知識とノウハウにになる形に落とし込んで今回は発表しようと思います。\r\n\r\n\r\n本トークでは、そのような Web サービス開発現場の newbie から中級層の方向けに「 microservices 的なサービス設計方法」「スタートアップサービスでの現実的な microservices の取り入れ方」「それらのメリットデメリットを」「ある程度トラフィックが有るサービスでのキーポイント」などを中心として、「多人数チームでの開発方法」「サービス稼働中の仕様変更」「運用トラブル etc」などなど具体的に踏み込んだポイントまで、明日からの現場の仕事で役立つトピック満載でお送りする予定です。\r\n\r\n\r\n## 触れること\r\n\r\n- microservices とはなんぞや\r\n - メリット\/デメリット\r\n - microservices 化できるサービス\/できないサービスの切り分け\r\n- 具体的な実装時のポイント(実装例は Perl を想定する)\r\n - サービスを細かく切り分ける勘所\r\n - サーバ構成の考え方\r\n  - 柔軟性が高い構成の指針\r\n - URI 設計\r\n - API の為の Protocol\r\n  - ハマりがちなポイント\r\n - 性能評価手法\r\n - QA\/Deploy\r\n - リポジトリ戦略\r\n- 運用関連\r\n - メンテナンスに強くするためには\/実際のメンテナンス手順\r\n - 仕様変更の対応手法\/仕様変更に伴う問題対処方法\r\n - ドキュメント\r\n","category":"app","duration":"30","sort_order":"0","start_on":"2015-08-21 16:00:00","created_on":"2015-06-02 20:29:59","material_level":"regular","subtitles":"en","member_id":"8a26f6e8-0911-11e5-ae40-67dc7d574c3a","calendar_entry_id":null,"title":"大規模でも小中規模サービスでも捗る microservices な Web サービスのつくりかた","is_confirmed":"1","tags":null,"language":"ja","title_en":"How to develop microservices with Perl","video_permission":"allow","slide_url":null,"venue_id":"2","speaker":{"nickname":"yappo","profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/9958?v=3","name":"Kazuhiro Osawa","id":"8a26f6e8-0911-11e5-ae40-67dc7d574c3a"},"status":"accepted","id":"b396e912-091a-11e5-8d2d-67dc7d574c3a","modified_on":"2015-06-02 20:29:59","abstract_html":"<p>最近は microservices という言葉がバズっていますが、これから Web サービスの開発を始める人にとってみたら「 microservices ってなに？おいしいの？それって僕らの作りたい物にも役に立つの？」と思っている人が多いとおもいます。<\/p>\n\n<p>実は、私は昔からこのアーキテクチャに基づいた考え方で数多くのサービスを作り運用してきました。それらの知見を多くの方々の知識とノウハウにになる形に落とし込んで今回は発表しようと思います。<\/p>\n\n<p>本トークでは、そのような Web サービス開発現場の newbie から中級層の方向けに「 microservices 的なサービス設計方法」「スタートアップサービスでの現実的な microservices の取り入れ方」「それらのメリットデメリットを」「ある程度トラフィックが有るサービスでのキーポイント」などを中心として、「多人数チームでの開発方法」「サービス稼働中の仕様変更」「運用トラブル etc」などなど具体的に踏み込んだポイントまで、明日からの現場の仕事で役立つトピック満載でお送りする予定です。<\/p>\n\n<h2>触れること<\/h2>\n\n<ul>\n<li>microservices とはなんぞや\n<ul>\n<li>メリット\/デメリット<\/li>\n<li>microservices 化できるサービス\/できないサービスの切り分け<\/li>\n<\/ul><\/li>\n<li>具体的な実装時のポイント(実装例は Perl を想定する)\n<ul>\n<li>サービスを細かく切り分ける勘所<\/li>\n<li>サーバ構成の考え方<\/li>\n<li>柔軟性が高い構成の指針<\/li>\n<li>URI 設計<\/li>\n<li>API の為の Protocol<\/li>\n<li>ハマりがちなポイント<\/li>\n<li>性能評価手法<\/li>\n<li>QA\/Deploy<\/li>\n<li>リポジトリ戦略<\/li>\n<\/ul><\/li>\n<li>運用関連\n<ul>\n<li>メンテナンスに強くするためには\/実際のメンテナンス手順<\/li>\n<li>仕様変更の対応手法\/仕様変更に伴う問題対処方法<\/li>\n<li>ドキュメント<\/li>\n<\/ul><\/li>\n<\/ul>\n","memo":null,"video_url":null,"has_interpratation":"0","photo_permission":"allow"}],[{"abstract_html":"<h1>いまだにES5時代のJS書いてませんか？<\/h1>\n\n<p>今年6月に公開されたJavaScript仕様の超大型アップデート <strong>ES6<\/strong> を紹介し、それによって変わるJSコーディングのベストプラクティスについて話します。<\/p>\n\n<hr \/>\n\n<p>JavaScriptはWeb開発では必須のポピュラーな言語でありながら、その言語仕様は「クセ」が強いことで知られています。<\/p>\n\n<p>関数スコープ、暗黙の型変換、プロトタイプ継承、ホイスティング、配列の「ような」オブジェクト、new、...etc<\/p>\n\n<p>そんなJavaScriptとの長年の格闘を経て、<a href=\"http:\/\/www.amazon.co.jp\/dp\/4798131113\">Effective JavaScript<\/a>、<a href=\"http:\/\/www.oreilly.co.jp\/books\/9784873113913\/\">JavaScript: The Good Parts<\/a>といったベストプラクティスが生み出され、普及していきました。<\/p>\n\n<p>ときは流れて、<strong>今年6月に待望の最新仕様ECMAScript 6が公開されました。<\/strong> ES5から5年、大幅なアップデートとなるES6は、これまであったJavaScriptの多くの落とし穴をふさいでくれます。ES5時代に使われたベストプラクティスの中には、ES6の登場によって置き換えられるものが多数あります。<\/p>\n\n<p>このトークでは、ES6で導入された新しい機能を紹介し、それによってこれまでのベストプラクティスがどう変化するかを話します。また、各ブラウザの実装状況、トランスパイラの存在、ES6以降の仕様策定などを踏まえて、これからのES6との付き合い方についても話します。<\/p>\n\n<p>JavaScriptのエキスパート向けではなく、Webに関わる全てのエンジニアにとって、JavaScriptの現状＆未来確認に役立つトークになればと思います。<\/p>\n\n<h2>話す内容<\/h2>\n\n<ul>\n<li>ES6とは何か？<\/li>\n<li>BabelでGO!! 今すぐ使えるES6<\/li>\n<li>ES6の主要機能の紹介<\/li>\n<li>ES6時代に不要になるベストプラクティス<\/li>\n<li>ES2016, ES2017 and ...<\/li>\n<li>これからのES6との付き合い方<\/li>\n<\/ul>\n\n<h2>スピーカー<\/h2>\n\n<ul>\n<li><a href=\"https:\/\/twitter.com\/teppeis\">@teppeis<\/a><\/li>\n<li><a href=\"http:\/\/teppeis.hatenablog.com\/\">Blog<\/a>, <a href=\"https:\/\/github.com\/teppeis\">GitHub<\/a><\/li>\n<li><a href=\"http:\/\/gihyo.jp\/magazine\/wdpress\/archive\/2015\/vol87\">WEB+DB PRESS Vol.87<\/a> にてES6特集を執筆<\/li>\n<\/ul>\n","memo":null,"modified_on":"2015-06-12 18:20:29","photo_permission":"allow","video_url":null,"has_interpratation":"0","speaker":{"profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/26476?v=3","name":"Teppei Sato","id":"cc4ca93e-fd7f-11e4-96e1-bdc07d574c3a","nickname":"teppeis"},"venue_id":"3","id":"44721562-10e4-11e5-88a0-d7f07d574c3a","status":"accepted","slide_url":"http:\/\/www.slideshare.net\/teppeis\/effective-es6","title":"Effective ES6","is_confirmed":"1","calendar_entry_id":null,"title_en":"Effective ES6","video_permission":"allow","tags":null,"language":"ja","category":"tutorial","sort_order":"0","duration":"60","abstract":"# いまだにES5時代のJS書いてませんか？\r\n\r\n今年6月に公開されたJavaScript仕様の超大型アップデート **ES6** を紹介し、それによって変わるJSコーディングのベストプラクティスについて話します。\r\n\r\n----\r\n\r\nJavaScriptはWeb開発では必須のポピュラーな言語でありながら、その言語仕様は「クセ」が強いことで知られています。\r\n\r\n関数スコープ、暗黙の型変換、プロトタイプ継承、ホイスティング、配列の「ような」オブジェクト、new、...etc\r\n\r\nそんなJavaScriptとの長年の格闘を経て、[Effective JavaScript](http:\/\/www.amazon.co.jp\/dp\/4798131113)、[JavaScript: The Good Parts](http:\/\/www.oreilly.co.jp\/books\/9784873113913\/)といったベストプラクティスが生み出され、普及していきました。\r\n\r\nときは流れて、**今年6月に待望の最新仕様ECMAScript 6が公開されました。** ES5から5年、大幅なアップデートとなるES6は、これまであったJavaScriptの多くの落とし穴をふさいでくれます。ES5時代に使われたベストプラクティスの中には、ES6の登場によって置き換えられるものが多数あります。\r\n\r\nこのトークでは、ES6で導入された新しい機能を紹介し、それによってこれまでのベストプラクティスがどう変化するかを話します。また、各ブラウザの実装状況、トランスパイラの存在、ES6以降の仕様策定などを踏まえて、これからのES6との付き合い方についても話します。\r\n\r\nJavaScriptのエキスパート向けではなく、Webに関わる全てのエンジニアにとって、JavaScriptの現状＆未来確認に役立つトークになればと思います。\r\n\r\n## 話す内容\r\n\r\n* ES6とは何か？\r\n* BabelでGO!! 今すぐ使えるES6\r\n* ES6の主要機能の紹介\r\n* ES6時代に不要になるベストプラクティス\r\n* ES2016, ES2017 and ...\r\n* これからのES6との付き合い方\r\n\r\n## スピーカー\r\n\r\n* [@teppeis](https:\/\/twitter.com\/teppeis)\r\n* [Blog](http:\/\/teppeis.hatenablog.com\/), [GitHub](https:\/\/github.com\/teppeis)\r\n* [WEB+DB PRESS Vol.87](http:\/\/gihyo.jp\/magazine\/wdpress\/archive\/2015\/vol87) にてES6特集を執筆","material_level":"regular","subtitles":"en","member_id":"cc4ca93e-fd7f-11e4-96e1-bdc07d574c3a","start_on":"2015-08-21 11:10:00","created_on":"2015-06-12 18:20:29"},{"created_on":"2015-06-01 12:09:43","start_on":"2015-08-21 13:10:00","member_id":"42138b82-0808-11e5-b6e5-79c97d574c3a","material_level":"beginner","subtitles":"ja","abstract":"空をとぶということは有史以来の人類の夢である。それゆえ実現するには相応の困難が待ち構えている。\r\n\r\n\r\nその中でクアッドコプター(4枚のプロペラを持った回転翼機)というジャンルは単純な機構でありながら、センサーとフィードバック制御の力で本来航空力学的に不安定であるはずの形状を制御することに成功した形態である。\r\n\r\n\r\n[昨年のトーク](http:\/\/yapcasia.org\/2014\/talk\/show\/103a434e-ec02-11e3-bd6d-c7a06aeab6a4)では、様々なIoT向けキットを紹介しつつ組み合わせてものを作る方法を提案したが、今回のトークでは既成品を利用して\r\n\r\n* 外から自動制御する\r\n* 内部を解析して乗っ取る\r\n* 外骨格とパーツだけ利用して中身は取り替える\r\n\r\nをテーマにPerlでドローン(=自立飛行する航空機)を作るのを目指す。\r\n\r\n\r\n\r\n#### このトークで伝えたいこと\r\n* クアッドコプターというジャンルの面白さ\r\n* Perlにも得意不得意がある。不得意をいかに補うか\r\n\r\n\r\n\r\n#### 対象者\r\n* どうしてもPerlでドローンを飛ばしたい人\r\n* Perlじゃなくてもいいけれどドローンを飛ばしたい人\r\n* Perlじゃなくてもいいけれどハードウェアを乗っ取りたい人\r\n* 電子回路の仕組みについて興味がある人\r\n* どうしてもPerlでいろいろ作りたいけれど別にドローンじゃなくていいけれどリアルタイムでなにかやりたい人\r\n\r\n\r\n\r\n#### このトークで話すこと\r\n* クアッドコプターの仕組み\r\n* 外部から操作する\r\n  * 波形を見てかーらーのー電気的介入\r\n  * それでもダメなら例えば物理で抑えこむ\r\n* みんな大好き電波の話\r\n* 乗っ取るのがダメなら基板ごと入れ替える\r\n* Perlによるハードウェア制御\r\n  * Perlでもリアルタイムしたい！　でもイベントドリブンは嫌だ！","duration":"60","sort_order":"0","category":"tutorial","language":"ja","tags":null,"title_en":"Make Drone written in Perl","video_permission":"allow","calendar_entry_id":null,"is_confirmed":"1","title":"どうしてもPerlでドローンを飛ばしたい人のためのハードウェアハック概論","slide_url":"https:\/\/speakerdeck.com\/mackee\/dousitemoperldedoronwofei-basitairen-falsetamefalsehadoueahatukugai-lun","status":"accepted","id":"a668ef3e-080b-11e5-b2b4-79c97d574c3a","venue_id":"3","speaker":{"profile_image_url":"http:\/\/pbs.twimg.com\/profile_images\/419456734264954880\/FYDksW9H_normal.jpeg","name":"macopy nnid:mackee_w","id":"42138b82-0808-11e5-b6e5-79c97d574c3a","nickname":"mackee_w"},"has_interpratation":"0","video_url":null,"photo_permission":"allow","modified_on":"2015-06-01 12:09:43","memo":null,"abstract_html":"<p>空をとぶということは有史以来の人類の夢である。それゆえ実現するには相応の困難が待ち構えている。<\/p>\n\n<p>その中でクアッドコプター(4枚のプロペラを持った回転翼機)というジャンルは単純な機構でありながら、センサーとフィードバック制御の力で本来航空力学的に不安定であるはずの形状を制御することに成功した形態である。<\/p>\n\n<p><a href=\"http:\/\/yapcasia.org\/2014\/talk\/show\/103a434e-ec02-11e3-bd6d-c7a06aeab6a4\">昨年のトーク<\/a>では、様々なIoT向けキットを紹介しつつ組み合わせてものを作る方法を提案したが、今回のトークでは既成品を利用して<\/p>\n\n<ul>\n<li>外から自動制御する<\/li>\n<li>内部を解析して乗っ取る<\/li>\n<li>外骨格とパーツだけ利用して中身は取り替える<\/li>\n<\/ul>\n\n<p>をテーマにPerlでドローン(=自立飛行する航空機)を作るのを目指す。<\/p>\n\n<h4>このトークで伝えたいこと<\/h4>\n\n<ul>\n<li>クアッドコプターというジャンルの面白さ<\/li>\n<li>Perlにも得意不得意がある。不得意をいかに補うか<\/li>\n<\/ul>\n\n<h4>対象者<\/h4>\n\n<ul>\n<li>どうしてもPerlでドローンを飛ばしたい人<\/li>\n<li>Perlじゃなくてもいいけれどドローンを飛ばしたい人<\/li>\n<li>Perlじゃなくてもいいけれどハードウェアを乗っ取りたい人<\/li>\n<li>電子回路の仕組みについて興味がある人<\/li>\n<li>どうしてもPerlでいろいろ作りたいけれど別にドローンじゃなくていいけれどリアルタイムでなにかやりたい人<\/li>\n<\/ul>\n\n<h4>このトークで話すこと<\/h4>\n\n<ul>\n<li>クアッドコプターの仕組み<\/li>\n<li>外部から操作する\n<ul>\n<li>波形を見てかーらーのー電気的介入<\/li>\n<li>それでもダメなら例えば物理で抑えこむ<\/li>\n<\/ul><\/li>\n<li>みんな大好き電波の話<\/li>\n<li>乗っ取るのがダメなら基板ごと入れ替える<\/li>\n<li>Perlによるハードウェア制御\n<ul>\n<li>Perlでもリアルタイムしたい！　でもイベントドリブンは嫌だ！<\/li>\n<\/ul><\/li>\n<\/ul>\n"},{"photo_permission":"allow","video_url":null,"has_interpratation":"0","abstract_html":"<h1>概要<\/h1>\n\n<p>「データ構造やアルゴリズム、計算量について知っておく事は、プログラマにとって、とても大切なことです」といろんなところで言われています。一方で「そんなの知らなくっても降ってくるお仕事は片付けられるもんねー」というのも、まあ、たしかにそうですね、という感じがします。でも、データ構造と計算量のことを知らないでいると、カジュアルに下手なインデックスを貼ってしまったり、単純な集計のはずなのに6時間動き続けて返ってこない……のようなスクリプトを書いてしまったりすることがあるので、やっぱり、プログラマにとってデータ構造やアルゴリズム、計算量の基本を知っているというのは、とても大切なことなんじゃないかな、とわたしは思っています。少なくとも、「計算機の気持ちになってコードを読み書きする」ときの助けになることはたしかです。<\/p>\n\n<p>でも、やっぱり計算量の話とかって、とっつきづらいですよね。「でもさー。わたし、文系なんだよね。なんか計算量がどうこうとかいうひとたちって数式でしゃべるじゃん。log とか？ アクセスログかよって思う。日本語でしゃべれって感じだよね」みたいな。わたしも文系卒なので、そんな気持ちはよくわかります。というか、わたしはそう思っていました。この発表は、そんなひとたち(つまり、昔の自分)がなるべく苦痛を感じないようにデータ構造と計算量に触れ、その後の独学独習の助けになるような基礎的な知識をつけてもらうことがゴールです。<\/p>\n\n<p>C言語による解説が一部入るかもしれませんが、多くのサンプルコードはPerlで記述する予定なので、C言語に苦手意識のある方でも楽しんで聴いていただけるのではないかと思います。<\/p>\n\n<h1>アジェンダ（仮）<\/h1>\n\n<ul>\n<li>データ構造について学ぶ前の基礎知識<\/li>\n<li>配列<\/li>\n<li>単方向連結リスト<\/li>\n<li>オーダー法について<\/li>\n<li>2分木<\/li>\n<li>B木<\/li>\n<li>B+木<\/li>\n<\/ul>\n\n<p>以上のデータ構造について見ていきながら、時間計算量について、なるべく平易に、しかし嘘をつかないように、実際の事例を交えながら学んでいきます。<\/p>\n\n<h1>対象となる方<\/h1>\n\n<ul>\n<li>コードを書くことはできるけど、「このデータはメモリにどう展開されるから〜」とか言われるととたんに置いていかれるひと<\/li>\n<li>アルゴリズムやデータ構造などに対して苦手意識が強い<\/li>\n<\/ul>\n\n<h1>対象とならない方<\/h1>\n\n<ul>\n<li>上記のデータ構造をすでに理解できているひと<\/li>\n<\/ul>\n","memo":null,"modified_on":"2015-05-22 13:40:07","speaker":{"name":"Shinpei Maruyama","profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/876988?v=3","id":"c2bd416a-0038-11e5-9094-89c77d574c3a","nickname":"Shinpeim"},"venue_id":"3","status":"accepted","id":"9f7059dc-003c-11e5-a00c-89c77d574c3a","slide_url":"https:\/\/speakerdeck.com\/shinpeim\/perldexue-bou-wen-xi-puroguramafalsetamefalse-zhi-shi-zerokarafalsedetagou-zao-toji-suan-liang","video_permission":"allow","title_en":null,"tags":null,"language":"ja","title":"Perlで学ぼう！文系プログラマのための、知識ゼロからのデータ構造と計算量","is_confirmed":"1","calendar_entry_id":null,"material_level":"beginner","subtitles":"ja","member_id":"c2bd416a-0038-11e5-9094-89c77d574c3a","start_on":"2015-08-21 14:20:00","created_on":"2015-05-22 13:40:07","category":"other","duration":"60","sort_order":"0","abstract":"# 概要\r\n「データ構造やアルゴリズム、計算量について知っておく事は、プログラマにとって、とても大切なことです」といろんなところで言われています。一方で「そんなの知らなくっても降ってくるお仕事は片付けられるもんねー」というのも、まあ、たしかにそうですね、という感じがします。でも、データ構造と計算量のことを知らないでいると、カジュアルに下手なインデックスを貼ってしまったり、単純な集計のはずなのに6時間動き続けて返ってこない……のようなスクリプトを書いてしまったりすることがあるので、やっぱり、プログラマにとってデータ構造やアルゴリズム、計算量の基本を知っているというのは、とても大切なことなんじゃないかな、とわたしは思っています。少なくとも、「計算機の気持ちになってコードを読み書きする」ときの助けになることはたしかです。\r\n\r\nでも、やっぱり計算量の話とかって、とっつきづらいですよね。「でもさー。わたし、文系なんだよね。なんか計算量がどうこうとかいうひとたちって数式でしゃべるじゃん。log とか？ アクセスログかよって思う。日本語でしゃべれって感じだよね」みたいな。わたしも文系卒なので、そんな気持ちはよくわかります。というか、わたしはそう思っていました。この発表は、そんなひとたち(つまり、昔の自分)がなるべく苦痛を感じないようにデータ構造と計算量に触れ、その後の独学独習の助けになるような基礎的な知識をつけてもらうことがゴールです。\r\n\r\nC言語による解説が一部入るかもしれませんが、多くのサンプルコードはPerlで記述する予定なので、C言語に苦手意識のある方でも楽しんで聴いていただけるのではないかと思います。\r\n\r\n#アジェンダ（仮）\r\n\r\n* データ構造について学ぶ前の基礎知識\r\n* 配列\r\n* 単方向連結リスト\r\n* オーダー法について\r\n* 2分木\r\n* B木\r\n* B+木\r\n\r\n以上のデータ構造について見ていきながら、時間計算量について、なるべく平易に、しかし嘘をつかないように、実際の事例を交えながら学んでいきます。\r\n\r\n# 対象となる方\r\n* コードを書くことはできるけど、「このデータはメモリにどう展開されるから〜」とか言われるととたんに置いていかれるひと\r\n* アルゴリズムやデータ構造などに対して苦手意識が強い\r\n\r\n# 対象とならない方\r\n* 上記のデータ構造をすでに理解できているひと"},{"abstract_html":"<h1>概要<\/h1>\n\n<p>PietはDavid Morgan-Marが考案したスタック指向プログラミング言語で、ソースコードがドット絵で表現されることが特徴です。Piet話者は文字の代わりにドットを打つことでプログラムを記述し、変数の代わりにスタックに整数を保存することで計算を行います。\nこのトークではプログラミング言語PietへのチュートリアルとPietでLISP処理系を実装するのは難しいねという話をします。<\/p>\n\n<h1>これは何ですか<\/h1>\n\n<p>私がPietと出会ったのは今年の3月でした。\n私が所属しているサークル「京大マイコンクラブ(KMC)」では毎年3月に部員が1年の間に得た知見を発表しあう春合宿というイベントが開かれます。そこにはKMC現代表のdamaさんによる<a href=\"http:\/\/www.slideshare.net\/KMC_JP\/piet-46068527\">「Pietのエディタを作った話」<\/a>があったのです。当時難解プログラミング言語といえばBrainf*ckおよびその派生言語しか知らなかった私にPietは大きな衝撃を与えました。スタックという高度なデータ構造。豊富な命令セット。秩序だった命令実行システム。これほどパワフルな言語機能を備え、それでもなお難解プログラミング言語でありつづけられるPietは、ただ読みにくい言語以上の奥深い何かを秘めているように感じられます。YAPC::Asia Tokyo 2015でPietによるプログラミングの楽しさ、Pietプログラムの美しさなどについて伝えられれば幸いです。<\/p>\n\n<h1>これは具体的に何ですか<\/h1>\n\n<ul>\n<li>Pietとは<\/li>\n<li>Pietの言語仕様の解説<\/li>\n<li>簡単なプログラムの実装\n<ul>\n<li>Hello, World!<\/li>\n<li>電卓<\/li>\n<li>PietによるCGIアプリケーション<\/li>\n<\/ul><\/li>\n<li>LISP処理系の設計概観<\/li>\n<li>LISP処理系の実装\nといった話をします。時間の都合や実装が完成しなかったなどの理由で構成は変更されることがあります。<\/li>\n<\/ul>\n\n<h1>どのようなメリットがありますか<\/h1>\n\n<ul>\n<li>PietでWebアプリケーションが書けるようになります。<\/li>\n<li>Factorなど他のスタック指向プログラミング言語を学ぶ際のステップになります。<\/li>\n<li><p>LISP処理系を書いてみようというモチベーションが生まれます。<\/p>\n\n<p><a href=\"\/\/www.slideshare.net\/HideakiNagamine\/pietlisp-51936482\">PietでLISP処理系を書くのは難しい<\/a>  from <a href=\"\/\/www.slideshare.net\/HideakiNagamine\">Hideaki Nagamine<\/a> <\/p><\/li>\n<\/ul>\n","memo":null,"modified_on":"2015-06-08 23:31:57","photo_permission":"allow","video_url":null,"has_interpratation":"0","speaker":{"profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/7394250?v=3","name":"Hideaki Nagamine","id":"88bb98ae-083f-11e5-96b5-79c97d574c3a","nickname":"1995hnagamin"},"venue_id":"3","id":"1da55daa-0deb-11e5-944c-67dc7d574c3a","status":"accepted","slide_url":null,"title":"PietでLISP処理系を書くのは難しい","is_confirmed":"1","calendar_entry_id":null,"video_permission":"allow","title_en":null,"tags":null,"language":"ja","category":"tutorial","sort_order":"0","duration":"30","abstract":"# 概要\r\nPietはDavid Morgan-Marが考案したスタック指向プログラミング言語で、ソースコードがドット絵で表現されることが特徴です。Piet話者は文字の代わりにドットを打つことでプログラムを記述し、変数の代わりにスタックに整数を保存することで計算を行います。\r\nこのトークではプログラミング言語PietへのチュートリアルとPietでLISP処理系を実装するのは難しいねという話をします。\r\n\r\n# これは何ですか\r\n私がPietと出会ったのは今年の3月でした。\r\n私が所属しているサークル「京大マイコンクラブ(KMC)」では毎年3月に部員が1年の間に得た知見を発表しあう春合宿というイベントが開かれます。そこにはKMC現代表のdamaさんによる[「Pietのエディタを作った話」](http:\/\/www.slideshare.net\/KMC_JP\/piet-46068527)があったのです。当時難解プログラミング言語といえばBrainf*ckおよびその派生言語しか知らなかった私にPietは大きな衝撃を与えました。スタックという高度なデータ構造。豊富な命令セット。秩序だった命令実行システム。これほどパワフルな言語機能を備え、それでもなお難解プログラミング言語でありつづけられるPietは、ただ読みにくい言語以上の奥深い何かを秘めているように感じられます。YAPC::Asia Tokyo 2015でPietによるプログラミングの楽しさ、Pietプログラムの美しさなどについて伝えられれば幸いです。\r\n\r\n# これは具体的に何ですか\r\n* Pietとは\r\n* Pietの言語仕様の解説\r\n* 簡単なプログラムの実装\r\n    * Hello, World!\r\n    * 電卓\r\n    * PietによるCGIアプリケーション\r\n* LISP処理系の設計概観\r\n* LISP処理系の実装\r\nといった話をします。時間の都合や実装が完成しなかったなどの理由で構成は変更されることがあります。\r\n\r\n# どのようなメリットがありますか\r\n* PietでWebアプリケーションが書けるようになります。\r\n* Factorなど他のスタック指向プログラミング言語を学ぶ際のステップになります。\r\n* LISP処理系を書いてみようというモチベーションが生まれます。\r\n\r\n<iframe src=\"\/\/www.slideshare.net\/slideshow\/embed_code\/key\/lfN1np8ffqfadX\" width=\"425\" height=\"355\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> <\/iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"\/\/www.slideshare.net\/HideakiNagamine\/pietlisp-51936482\" title=\"PietでLISP処理系を書くのは難しい\" target=\"_blank\">PietでLISP処理系を書くのは難しい<\/a> <\/strong> from <strong><a href=\"\/\/www.slideshare.net\/HideakiNagamine\" target=\"_blank\">Hideaki Nagamine<\/a><\/strong> <\/div>","subtitles":"ja","material_level":"regular","member_id":"88bb98ae-083f-11e5-96b5-79c97d574c3a","start_on":"2015-08-21 15:30:00","created_on":"2015-06-08 23:31:57"},{"id":"53944d48-09ba-11e5-998a-67dc7d574c3a","status":"accepted","venue_id":"3","speaker":{"id":"333b2ebe-09b9-11e5-bc29-67dc7d574c3a","profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/21084?v=3","name":"Tokuhiro Matsuno","nickname":"tokuhirom"},"slide_url":"http:\/\/www.slideshare.net\/tokuhirom\/perl6-meets-jvm","memo":"イェーイ 牧さんみてる~?","abstract_html":"<p>Perl6 のリリースが近づいてくる中で、いい加減触ってみるか! という方も多いと思います。\n一方で、Perl6 ってライブラリが全然ないし、なにもできること無いんじゃないの? という感想をお持ちの方もいらっしゃることでしょう。\nそんなことはありません。<\/p>\n\n<p>Perl6 は JVM 上で動くんです! 実は!<\/p>\n\n<p>JVM で動くってことはあんなライブラリ、こんなライブラリも利用できるってことなの?? ってきになってきますよね。<\/p>\n\n<p>本セッションでは JVM で動く Perl6 を利用して、どのようなことができるのか、どの程度 java のライブラリを活用できるのか、といったことについてご紹介したいと思います。<\/p>\n","modified_on":"2015-06-03 15:32:37","photo_permission":"allow","has_interpratation":"0","video_url":null,"duration":"30","sort_order":"0","category":"tutorial","abstract":"Perl6 のリリースが近づいてくる中で、いい加減触ってみるか! という方も多いと思います。\r\n一方で、Perl6 ってライブラリが全然ないし、なにもできること無いんじゃないの? という感想をお持ちの方もいらっしゃることでしょう。\r\nそんなことはありません。\r\n\r\nPerl6 は JVM 上で動くんです! 実は!\r\n\r\nJVM で動くってことはあんなライブラリ、こんなライブラリも利用できるってことなの?? ってきになってきますよね。\r\n\r\n本セッションでは JVM で動く Perl6 を利用して、どのようなことができるのか、どの程度 java のライブラリを活用できるのか、といったことについてご紹介したいと思います。","member_id":"333b2ebe-09b9-11e5-bc29-67dc7d574c3a","subtitles":"en","material_level":"regular","created_on":"2015-06-03 15:32:37","start_on":"2015-08-21 16:00:00","is_confirmed":"1","title":"Perl6 on JVM: It works??","calendar_entry_id":null,"title_en":"Perl6 on JVM: It works??","video_permission":"allow","language":"ja","tags":null}],[{"abstract_html":"<p>週末兼業から始まったプロジェクト<\/p>\n\n<p>「鍵ロボットをつくりたい」<\/p>\n\n<p>大手メーカーとIT系ベンチャーに所属する若手エンジニアたちが、一つのハードウェアデバイスをつくるために、\n会社を辞め、起業し、プロトタイプをつくり、量産機を工場でつくり、出荷するまでの駆け抜けた半年間。<\/p>\n\n<p>今回はWebエンジニアとして生きてきた自分が、どうやって組み込みのセカイに足を踏み入れたのか、\n待ち構えていたハードルをどうやって乗り越えたのか、Webエンジニアだったからできたことはなんなのか？\nデジタル（ソフト）なセカイだけでは知らなかった、0から1にするまでの間のアナログ（ハード）なできごとを包み隠さず話します。<\/p>\n\n<p>トークの内容（予定）<\/p>\n\n<ul>\n<li>Webエンジニアの組み込みの始め方、楽しさ<\/li>\n<li>Webの技術がなければできなかったハードウェアを支えた技術<\/li>\n<li>Web〜ハードの複数のレイヤーをまたがって思考することの大切さ<\/li>\n<li>Web由来の組み込みエンジニアの重要性<\/li>\n<li>組み込みプログラミングをやるために知っておくべきこと<\/li>\n<li><p>他<\/p>\n\n<p>　<\/p><\/li>\n<\/ul>\n","memo":null,"modified_on":"2015-05-23 12:17:51","photo_permission":"allow","video_url":null,"has_interpratation":"0","venue_id":"4","speaker":{"id":"1fc7e384-fd5e-11e4-9d3f-bdc07d574c3a","profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/849165?v=3","name":"Kazuhiro Homma","nickname":"kazuph"},"status":"accepted","id":"4bab2728-00fa-11e5-9931-79c97d574c3a","slide_url":"http:\/\/kazuph.github.io\/presentation\/yapc-2015-iot-presentation\/#1","title":"Web由来の組み込みエンジニアの半年間のすべて 〜WebとiOSとBLEとハードウェアデバイスのこと〜","is_confirmed":"1","calendar_entry_id":null,"title_en":"All of embed engineer from Web - Web, iOS, BLE and Hardware device -","video_permission":"allow","tags":null,"language":"ja","category":"app","duration":"60","sort_order":"0","abstract":"週末兼業から始まったプロジェクト\r\n\r\n「鍵ロボットをつくりたい」\r\n\r\n大手メーカーとIT系ベンチャーに所属する若手エンジニアたちが、一つのハードウェアデバイスをつくるために、\r\n会社を辞め、起業し、プロトタイプをつくり、量産機を工場でつくり、出荷するまでの駆け抜けた半年間。\r\n\r\n今回はWebエンジニアとして生きてきた自分が、どうやって組み込みのセカイに足を踏み入れたのか、\r\n待ち構えていたハードルをどうやって乗り越えたのか、Webエンジニアだったからできたことはなんなのか？\r\nデジタル（ソフト）なセカイだけでは知らなかった、0から1にするまでの間のアナログ（ハード）なできごとを包み隠さず話します。\r\n\r\nトークの内容（予定）\r\n\r\n- Webエンジニアの組み込みの始め方、楽しさ\r\n- Webの技術がなければできなかったハードウェアを支えた技術\r\n- Web〜ハードの複数のレイヤーをまたがって思考することの大切さ\r\n- Web由来の組み込みエンジニアの重要性\r\n- 組み込みプログラミングをやるために知っておくべきこと\r\n- 他\r\n\r\n　\r\n","subtitles":"ja","material_level":"regular","member_id":"1fc7e384-fd5e-11e4-9d3f-bdc07d574c3a","start_on":"2015-08-21 11:10:00","created_on":"2015-05-23 12:17:51"},{"material_level":"regular","subtitles":"en","member_id":"57824382-09b6-11e5-ad57-67dc7d574c3a","start_on":"2015-08-21 13:10:00","created_on":"2015-06-03 15:15:02","category":"infra","duration":"60","sort_order":"0","abstract":"2015年5月の RFC 化完了以降、主要なウェブブラウザの HTTP\/2 対応が急速に進んでいます。今年末までには、HTTPS トラフィックの過半は HTTP\/2 を利用するようになるでしょう。\r\n\r\n本セッションでは、先進的な HTTP\/2 サーバとして注目されている [H2O](https:\/\/h2o.examp1e.net) の主開発者である奥一穂が、HTTP\/2 策定の背景と HTTP\/1.1 に対する優位性、HTTP\/2 時代にむけたウェブサイト設計のポイントについて説明します。\r\n\r\nSince the completion of the standardization process in May 2015, Web browser vendors are rushing to support HTTP\/2.  It is likely that the majority of HTTPS traffic will be using HTTP\/2 by the end of this year.\r\n\r\nIn this session, Kazuho Oku, the lead developer of [H2O](https:\/\/h2o.examp1e.net) which is gaining world-wide attention for its advanced features in its HTTP\/2 support, talks about the background of HTTP\/2 specification, its advantages over HTTP\/1.1, and how to architect the websites for the HTTP\/2 era.","title_en":"Website Architecture for HTTP\/2 Era","video_permission":"allow","tags":null,"language":"ja","title":"HTTP\/2時代のウェブサイト設計","is_confirmed":"1","calendar_entry_id":null,"speaker":{"profile_image_url":"http:\/\/pbs.twimg.com\/profile_images\/1656455610\/__________2011-11-25_12.16.30__normal.png","name":"Kazuho Oku","id":"57824382-09b6-11e5-ad57-67dc7d574c3a","nickname":"kazuho"},"venue_id":"4","status":"accepted","id":"dead6890-09b7-11e5-998a-67dc7d574c3a","slide_url":"http:\/\/www.slideshare.net\/kazuho\/http2-51888328","photo_permission":"allow","video_url":null,"has_interpratation":"0","abstract_html":"<p>2015年5月の RFC 化完了以降、主要なウェブブラウザの HTTP\/2 対応が急速に進んでいます。今年末までには、HTTPS トラフィックの過半は HTTP\/2 を利用するようになるでしょう。<\/p>\n\n<p>本セッションでは、先進的な HTTP\/2 サーバとして注目されている <a href=\"https:\/\/h2o.examp1e.net\">H2O<\/a> の主開発者である奥一穂が、HTTP\/2 策定の背景と HTTP\/1.1 に対する優位性、HTTP\/2 時代にむけたウェブサイト設計のポイントについて説明します。<\/p>\n\n<p>Since the completion of the standardization process in May 2015, Web browser vendors are rushing to support HTTP\/2.  It is likely that the majority of HTTPS traffic will be using HTTP\/2 by the end of this year.<\/p>\n\n<p>In this session, Kazuho Oku, the lead developer of <a href=\"https:\/\/h2o.examp1e.net\">H2O<\/a> which is gaining world-wide attention for its advanced features in its HTTP\/2 support, talks about the background of HTTP\/2 specification, its advantages over HTTP\/1.1, and how to architect the websites for the HTTP\/2 era.<\/p>\n","memo":"30分でも大丈夫です！","modified_on":"2015-06-03 15:15:02"},{"status":"accepted","id":"e14c5ae0-12f7-11e5-a909-d9f87d574c3a","venue_id":"4","speaker":{"nickname":"crazygirl_lover","id":"c8d45eb6-fd64-11e4-afab-bdc07d574c3a","profile_image_url":"http:\/\/pbs.twimg.com\/profile_images\/599568269507342336\/jb_Rk7sX_normal.jpg","name":"ｼﾞﾝｼﾞﾆｱ"},"slide_url":null,"photo_permission":"allow","has_interpratation":"0","video_url":null,"memo":"参加者は最終調整中です。（@papixはほぼ確定。DeNAの新人エンジニアを調整中）\r\ntalk採択がされればその方々と被っていない時間帯に調整いただけますようお願いします。\r\n（参加者、早く確定させます。すみません＞＜）","abstract_html":"<p>日本のWeb業界において古くから利用されているPerl。\nそのためか、「Perlといえばベテランエンジニアのもの」といったイメージをもたれがちなのではないでしょうか。\n一方、モバイルファクトリーを含め、開発言語にPerlを採用している多くの企業では、若手エンジニアが活躍しています。<\/p>\n\n<p>本コンテンツでは、各社の若手エンジニアを招いた座談会で「Perl=ベテラン」というイメージを払拭したいと思います。\n※登壇者は各社調整中。決まり次第追記します。<\/p>\n\n<h2>登壇者（7\/29追記）<\/h2>\n\n<ul>\n<li>@mihyaeru21さん<\/li>\n<li>@__papix__さん<\/li>\n<li>@hisaichi5518さん<\/li>\n<li><p>@zoncoenさん<\/p><\/li>\n<li><p>ファシリテーター：@crazygirl_lover<\/p><\/li>\n<\/ul>\n\n<h2>具体的な内容<\/h2>\n\n<ul>\n<li>そもそもPerl業界におけるベテラン勢の勢力とは<\/li>\n<li>こんなベテランはいやだ！<\/li>\n<li>Perl業界に期待していること、変えていきたいこと　など<\/li>\n<\/ul>\n","modified_on":"2015-06-15 09:45:55","member_id":"c8d45eb6-fd64-11e4-afab-bdc07d574c3a","material_level":"beginner","subtitles":"ja","created_on":"2015-06-15 09:45:55","start_on":"2015-08-21 14:20:00","duration":"60","sort_order":"0","category":"other","abstract":"日本のWeb業界において古くから利用されているPerl。\r\nそのためか、「Perlといえばベテランエンジニアのもの」といったイメージをもたれがちなのではないでしょうか。\r\n一方、モバイルファクトリーを含め、開発言語にPerlを採用している多くの企業では、若手エンジニアが活躍しています。\r\n\r\n本コンテンツでは、各社の若手エンジニアを招いた座談会で「Perl=ベテラン」というイメージを払拭したいと思います。\r\n※登壇者は各社調整中。決まり次第追記します。\r\n\r\n##登壇者（7\/29追記）\r\n- @mihyaeru21さん\r\n- @\\_\\_papix\\_\\_さん\r\n- @hisaichi5518さん\r\n- @zoncoenさん\r\n\r\n- ファシリテーター：@crazygirl_lover\r\n\r\n\r\n## 具体的な内容\r\n- そもそもPerl業界におけるベテラン勢の勢力とは\r\n- こんなベテランはいやだ！\r\n- Perl業界に期待していること、変えていきたいこと　など","title_en":null,"video_permission":"allow","language":"ja","tags":null,"is_confirmed":"1","title":"【sponsored contents】若手エンジニア達の生存戦略","calendar_entry_id":null},{"slide_url":"http:\/\/www.slideshare.net\/karupanerura\/technology-for-reduce-of-mistakes","id":"523b9508-0d77-11e5-8174-67dc7d574c3a","status":"accepted","venue_id":"4","speaker":{"id":"66337810-f5fc-11e4-a2c6-49b37d574c3a","name":"karupanerura","profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/374550?v=3","nickname":"karupanerura"},"modified_on":"2015-06-08 09:43:04","memo":null,"abstract_html":"<h2>人間は間違える生き物である<\/h2>\n\n<p>以下の問題を解決するヒントになる話をします:<\/p>\n\n<ul>\n<li>既存のコードを誤って壊してしまうことがよくある<\/li>\n<li>作業手順が多くよくミスをしてしまう<\/li>\n<li>設定が正しいのかどうかよくわからないので祈りながらdeployをしている<\/li>\n<\/ul>\n\n<p>このような問題はなにを引き起こすでしょうか？\nたとえば、Webアプリケーションの開発においては、誤ったデータベースの変更や決済処理を正しい状態に戻すことは難しいでしょう。\nまた、iOSやAndroid向けのアプリケーションの開発においては、リリースしてしまったコードを消すことはできません。\nソフトウェアにはこのようなリスクに対する安全性が求められます。<\/p>\n\n<p>そういった意味での、安全なアプリケーションとはなんでしょうか？\n一般的には、安全なアプリケーションであるために、以下のような要素が必要とされると思います。<\/p>\n\n<ul>\n<li>クラッシュしにくい<\/li>\n<li>オペレーションを間違えにくい<\/li>\n<li>データを破壊しにくい<\/li>\n<li>コードを書き換えても壊しにくい<\/li>\n<\/ul>\n\n<p>このような安全性を担保するために、どのようなプラクティスがあるでしょうか？<\/p>\n\n<p>そして、なぜこのような問題が起こってしまうのでしょうか？\n自分が無能だから？環境が悪いから？違います。\nこれらの問題は本来、仕組みによって解決可能な問題です。\n人間は間違える生き物です。なので、間違えることを前提に仕組みを構築する必要があります。<\/p>\n\n<p>本セッションでは安全工学の視点を取り入れつつ、具体的なヒヤリハット事例\/ヒューマンエラー事例と共に、安全なアプリケーションを構築する技術とその基本的な考え方について、僕の考えを話します。\nなお、セキュリティに関連する話も安全性に大きく関わるところではありますが、本セッションでは時間の都合上扱わない予定です。<\/p>\n\n<p>トピック:<\/p>\n\n<ul>\n<li>ソフトウェアにおける「安全」とはなにか\n<ul>\n<li>ハインリッヒの法則<\/li>\n<\/ul><\/li>\n<li>安全性を担保するための考え方\n<ul>\n<li>フォルトツリー解析<\/li>\n<li>ポカヨケ<\/li>\n<li>etc..<\/li>\n<\/ul><\/li>\n<li>安全性を担保するための言語機能\n<ul>\n<li>型制約<\/li>\n<li>Optional<\/li>\n<li>etc..<\/li>\n<\/ul><\/li>\n<li>安全性を担保するためのライブラリ\n<ul>\n<li>strict.pm\/warnings.pm<\/li>\n<li>Perl::Lint\/Perl::Critic\/etc..<\/li>\n<li>DBIx::TransactionManager<\/li>\n<li>etc..<\/li>\n<\/ul><\/li>\n<li>安全性を担保するためのプラクティス\n<ul>\n<li>assertion<\/li>\n<li>defer\/guard object<\/li>\n<li>max reqs per child<\/li>\n<li>静的解析<\/li>\n<li>テストカバレッジ<\/li>\n<li>コードメトリクス<\/li>\n<li>継続的インテグレーション<\/li>\n<li>etc..<\/li>\n<\/ul><\/li>\n<\/ul>\n\n<h2>in English<\/h2>\n\n<p>(write it if this talk is accepted)<\/p>\n","has_interpratation":"0","video_url":null,"photo_permission":"allow","abstract":"## 人間は間違える生き物である\r\n\r\n以下の問題を解決するヒントになる話をします:\r\n\r\n* 既存のコードを誤って壊してしまうことがよくある\r\n* 作業手順が多くよくミスをしてしまう\r\n* 設定が正しいのかどうかよくわからないので祈りながらdeployをしている\r\n\r\nこのような問題はなにを引き起こすでしょうか？\r\nたとえば、Webアプリケーションの開発においては、誤ったデータベースの変更や決済処理を正しい状態に戻すことは難しいでしょう。\r\nまた、iOSやAndroid向けのアプリケーションの開発においては、リリースしてしまったコードを消すことはできません。\r\nソフトウェアにはこのようなリスクに対する安全性が求められます。\r\n\r\nそういった意味での、安全なアプリケーションとはなんでしょうか？\r\n一般的には、安全なアプリケーションであるために、以下のような要素が必要とされると思います。\r\n\r\n* クラッシュしにくい\r\n* オペレーションを間違えにくい\r\n* データを破壊しにくい\r\n* コードを書き換えても壊しにくい\r\n\r\nこのような安全性を担保するために、どのようなプラクティスがあるでしょうか？\r\n\r\nそして、なぜこのような問題が起こってしまうのでしょうか？\r\n自分が無能だから？環境が悪いから？違います。\r\nこれらの問題は本来、仕組みによって解決可能な問題です。\r\n人間は間違える生き物です。なので、間違えることを前提に仕組みを構築する必要があります。\r\n\r\n本セッションでは安全工学の視点を取り入れつつ、具体的なヒヤリハット事例\/ヒューマンエラー事例と共に、安全なアプリケーションを構築する技術とその基本的な考え方について、僕の考えを話します。\r\nなお、セキュリティに関連する話も安全性に大きく関わるところではありますが、本セッションでは時間の都合上扱わない予定です。\r\n\r\n\r\nトピック:\r\n\r\n* ソフトウェアにおける「安全」とはなにか\r\n  * ハインリッヒの法則\r\n* 安全性を担保するための考え方\r\n  * フォルトツリー解析\r\n  * ポカヨケ\r\n  * etc..\r\n* 安全性を担保するための言語機能\r\n  * 型制約\r\n  * Optional\r\n  * etc..\r\n* 安全性を担保するためのライブラリ\r\n  * strict.pm\/warnings.pm\r\n  * Perl::Lint\/Perl::Critic\/etc..\r\n  * DBIx::TransactionManager\r\n  * etc..\r\n* 安全性を担保するためのプラクティス\r\n  * assertion\r\n  * defer\/guard object\r\n  * max reqs per child\r\n  * 静的解析\r\n  * テストカバレッジ\r\n  * コードメトリクス\r\n  * 継続的インテグレーション\r\n  * etc..\r\n\r\n## in English\r\n\r\n(write it if this talk is accepted)","duration":"60","sort_order":"0","category":"app","created_on":"2015-06-08 09:43:04","start_on":"2015-08-21 15:30:00","member_id":"66337810-f5fc-11e4-a2c6-49b37d574c3a","material_level":"beginner","subtitles":"en","calendar_entry_id":null,"is_confirmed":"1","title":"うっかりをなくす技術","language":"ja","tags":null,"video_permission":"allow","title_en":"Technology for reduce a mistake."}],[{"modified_on":"2015-05-29 18:32:27","abstract_html":"<p>Miiverse とは任天堂株式会社が運営しているウェブサービスであり、世界中の Wii U やニンテンドー3DS、そして PC やスマートデバイスから利用することができます。<\/p>\n\n<p>AWS 上でマルチリージョン構成をとり大量のサーバを抱える Miiverse のデプロイを支える技術と運用上の工夫、そして株式会社はてなと任天堂株式会社が共同で開発する Git リポジトリの同期システムの構築を通して得られた経験をもとに、大規模なウェブサービスを素早くかつ安全に改善する方法を紹介します。<\/p>\n\n<h1>概要<\/h1>\n\n<ul>\n<li>これまでの Miiverse のデプロイ\n<ul>\n<li>採用している技術の紹介<\/li>\n<li>運用の概観<\/li>\n<li>運用上の tips<\/li>\n<\/ul><\/li>\n<li>Git リポジトリ同期システム\n<ul>\n<li>背景<\/li>\n<li>はてなにおける先行事例<\/li>\n<li>アーキテクチャ紹介<\/li>\n<\/ul><\/li>\n<li>新しいアーキテクチャのデプロイ\n<ul>\n<li>現状のアーキテクチャの課題とその解決<\/li>\n<\/ul><\/li>\n<\/ul>\n\n<h1>取り上げる予定のキーワード<\/h1>\n\n<ul>\n<li>マルチリージョン<\/li>\n<li>Git<\/li>\n<li><a href=\"https:\/\/github.com\/\">GitHub<\/a>, <a href=\"https:\/\/enterprise.github.com\/\">GitHub Enterprise<\/a><\/li>\n<li>デプロイ\n<ul>\n<li>Capistrano 2<\/li>\n<li>Cinnamon<\/li>\n<li><a href=\"https:\/\/consul.io\">Consul<\/a><\/li>\n<\/ul><\/li>\n<li>オートスケール\n<ul>\n<li><a href=\"https:\/\/mackerel.io\/\">Mackerel<\/a><\/li>\n<li><a href=\"https:\/\/aws.amazon.com\/\">Amazon Web Services<\/a><\/li>\n<\/ul><\/li>\n<\/ul>\n","memo":"トークを応募した aereal に加えて任天堂株式会社のエンジニア二人で共同での登壇とさせていただきたいです。","video_url":null,"has_interpratation":"0","photo_permission":"disallow","slide_url":"https:\/\/speakerdeck.com\/hatena\/yapc-asia-tokyo-2015","venue_id":"5","speaker":{"nickname":"aereal","profile_image_url":"https:\/\/avatars.githubusercontent.com\/u\/87649?v=3","name":"aereal","id":"2689f76a-f5f3-11e4-b323-49b37d574c3a"},"id":"9ec2791c-05e5-11e5-81fa-79c97d574c3a","status":"accepted","calendar_entry_id":null,"title":"世界展開する大規模ウェブサービスのデプロイを支える技術","is_confirmed":"1","tags":null,"language":"ja","title_en":null,"video_permission":"disallow","abstract":"Miiverse とは任天堂株式会社が運営しているウェブサービスであり、世界中の Wii U やニンテンドー3DS、そして PC やスマートデバイスから利用することができます。\r\n\r\nAWS 上でマルチリージョン構成をとり大量のサーバを抱える Miiverse のデプロイを支える技術と運用上の工夫、そして株式会社はてなと任天堂株式会社が共同で開発する Git リポジトリの同期システムの構築を通して得られた経験をもとに、大規模なウェブサービスを素早くかつ安全に改善する方法を紹介します。\r\n\r\n# 概要\r\n\r\n* これまでの Miiverse のデプロイ\r\n  * 採用している技術の紹介\r\n  * 運用の概観\r\n  * 運用上の tips\r\n* Git リポジトリ同期システム\r\n  * 背景\r\n  * はてなにおける先行事例\r\n  * アーキテクチャ紹介\r\n* 新しいアーキテクチャのデプロイ\r\n  * 現状のアーキテクチャの課題とその解決\r\n\r\n# 取り上げる予定のキーワード\r\n\r\n* マルチリージョン\r\n* Git\r\n* [GitHub](https:\/\/github.com\/), [GitHub Enterprise](https:\/\/enterprise.github.com\/)\r\n* デプロイ\r\n  * Capistrano 2\r\n  * Cinnamon\r\n  * [Consul](https:\/\/consul.io)\r\n* オートスケール\r\n  * [Mackerel](https:\/\/mackerel.io\/)\r\n  * [Amazon Web Services](https:\/\/aws.amazon.com\/)\r\n","category":"app","duration":"60","sort_order":"0","start_on":"2015-08-21 11:10:00","created_on":"2015-05-29 18:32:27","material_level":"regular","subtitles":"none","member_id":"2689f76a-f5f3-11e4-b323-49b37d574c3a"},{"id":"b335dee0-09ad-11e5-8d7a-67dc7d574c3a","status":"accepted","speaker":{"profile_image_url":"http:\/\/pbs.twimg.com\/profile_images\/1295745651\/fujiwara-icon-s_normal.png","name":"fujiwara","id":"492e32d2-098e-11e5-b387-67dc7d574c3a","nickname":"fujiwara"},"venue_id":"5","slide_url":"https:\/\/speakerdeck.com\/fujiwara3\/consultozi-zuo-osswohuo-yong-sita100tai-gui-mo-falsewebsabisuyun-yong","memo":null,"abstract_html":"<p><a href=\"http:\/\/www.kayac.com\/\">カヤック<\/a>が運営しているスマートフォン向けSNS <a href=\"https:\/\/lobi.co\/\">Lobi<\/a> は、Amazon Web Services(AWS)上で<a href=\"https:\/\/hashicorp.com\/\">Hashicorp社<\/a>が開発しているオーケストレーションツール <a href=\"https:\/\/consul.io\/\">Consul<\/a> を活用し、EC2インスタンス100台規模のサーバと、AWSのマネージドサービスを利用して運用しています。<\/p>\n\n<p>Consulの機能と、それを活用するために開発したOSSとともに実践的に運用している事例をご紹介します。<\/p>\n\n<ul>\n<li>Consulとは\n<ul>\n<li>機能の紹介<\/li>\n<\/ul><\/li>\n<li>Consulを本番環境で運用するために\n<ul>\n<li>構成<\/li>\n<li>監視<\/li>\n<li>高可用性のためのノウハウ<\/li>\n<li>クラスタ障害時のリカバリ手法<\/li>\n<\/ul><\/li>\n<li>オートスケール環境で動的に増減するサーバを扱う\n<ul>\n<li>DNS interface によるホスト、サービスの名前解決<\/li>\n<li>コマンドのホスト名補完<\/li>\n<li>自前オートスケールやjob管理への<code>consul exec<\/code>の応用<\/li>\n<\/ul><\/li>\n<li><a href=\"https:\/\/github.com\/fujiwara\/stretcher\">Stretcher<\/a>を利用したデプロイ\n<ul>\n<li>自作OSS<\/li>\n<li>Consul Event, S3と連携してスケーラブルなデプロイを行う<\/li>\n<\/ul><\/li>\n<li><a href=\"https:\/\/github.com\/fujiwara\/consul-kv-dashboard\">Consul KV Dashboard<\/a> によるダッシュボード、通知システム\n<ul>\n<li>自作OSS<\/li>\n<li>Consul KV (key value store)を利用したリアルタイムダッシュボードWebアプリケーション<\/li>\n<\/ul><\/li>\n<li>Chefによるプロビジョニングとの連携\n<ul>\n<li>Chef-ServerとConsulを利用してノードを発見する<\/li>\n<\/ul><\/li>\n<li>Zabbixによる監視との連携<\/li>\n<\/ul>\n\n<p>Lobiについて<\/p>\n\n<ul>\n<li>公開コミュニティ12万以上、SDK導入アプリ590以上 (2015年2月現在)<\/li>\n<li>言語: Perl, Go, Node.js<\/li>\n<li>ミドルウェア: Consul, Nginx, MySQL, Starlet, Fluentd, Norikra, memcached, HAProxy, dnsmasq<\/li>\n<li>AWSマネージドサービス: S3, CloudFront, Elasticache, Route53, Redshift, SQS, ElasticTranscoder, CloudWatch<\/li>\n<\/ul>\n","modified_on":"2015-06-03 14:02:14","photo_permission":"allow","has_interpratation":"0","video_url":null,"sort_order":"0","duration":"60","category":"infra","abstract":"[カヤック](http:\/\/www.kayac.com\/)が運営しているスマートフォン向けSNS [Lobi](https:\/\/lobi.co\/) は、Amazon Web Services(AWS)上で[Hashicorp社](https:\/\/hashicorp.com\/)が開発しているオーケストレーションツール [Consul](https:\/\/consul.io\/) を活用し、EC2インスタンス100台規模のサーバと、AWSのマネージドサービスを利用して運用しています。\r\n\r\nConsulの機能と、それを活用するために開発したOSSとともに実践的に運用している事例をご紹介します。\r\n\r\n- Consulとは\r\n  - 機能の紹介\r\n- Consulを本番環境で運用するために\r\n  - 構成\r\n  - 監視\r\n  - 高可用性のためのノウハウ\r\n  - クラスタ障害時のリカバリ手法\r\n- オートスケール環境で動的に増減するサーバを扱う\r\n  - DNS interface によるホスト、サービスの名前解決\r\n  - コマンドのホスト名補完\r\n  - 自前オートスケールやjob管理への`consul exec`の応用\r\n- [Stretcher](https:\/\/github.com\/fujiwara\/stretcher)を利用したデプロイ\r\n  - 自作OSS\r\n  - Consul Event, S3と連携してスケーラブルなデプロイを行う\r\n- [Consul KV Dashboard](https:\/\/github.com\/fujiwara\/consul-kv-dashboard) によるダッシュボード、通知システム\r\n  - 自作OSS\r\n  - Consul KV (key value store)を利用したリアルタイムダッシュボードWebアプリケーション\r\n- Chefによるプロビジョニングとの連携\r\n  - Chef-ServerとConsulを利用してノードを発見する\r\n- Zabbixによる監視との連携\r\n\r\nLobiについて\r\n\r\n- 公開コミュニティ12万以上、SDK導入アプリ590以上 (2015年2月現在)\r\n- 言語: Perl, Go, Node.js\r\n- ミドルウェア: Consul, Nginx, MySQL, Starlet, Fluentd, Norikra, memcached, HAProxy, dnsmasq\r\n- AWSマネージドサービス: S3, CloudFront, Elasticache, Route53, Redshift, SQS, ElasticTranscoder, CloudWatch\r\n","member_id":"492e32d2-098e-11e5-b387-67dc7d574c3a","material_level":"regular","subtitles":"en","created_on":"2015-06-03 14:02:14","start_on":"2015-08-21 13:10:00","is_confirmed":"1","title":"Consulと自作OSSを活用した100台規模のWebサービス運用","calendar_entry_id":null,"title_en":null,"video_permission":"allow","language":"ja","tags":null},{"slide_url":null,"speaker":{"name":"趣味はマリンスポーツです","profile_image_url":"http:\/\/pbs.twimg.com\/profile_images\/1753788808\/sushi_r_normal.gif","id":"ea0bf72c-135f-11e5-addc-d9f87d574c3a","nickname":"hitode909"},"venue_id":"5","id":"de9e7a1e-136d-11e5-a9fc-d9f87d574c3a","status":"accepted","video_url":null,"has_interpratation":"0","photo_permission":"allow","modified_on":"2015-06-15 23:50:31","abstract_html":"<p>発表者は，この三年間はてなブログというイケてるPerlのサービスの開発に携ってきました…<\/p>\n\n<p>Perlの最新を追い求め続けた三年間でした…<\/p>\n\n<p>なにも分からず，SQLをコピペし続けた数ヶ月…<\/p>\n\n<p>つらいことも，たのしいことも，みんな分かちあったコードベース…<\/p>\n\n<p>救いを求め，藁にもすがる思いで，朝も夜も読み続けたオブジェクト指向入門……<\/p>\n\n<p>偶然発見して，これだと思ったドメイン駆動設計……<\/p>\n\n<p>苦しみの軌跡と，現在最高の設計を紹介します………!!!!!!!<\/p>\n\n<h3>当時最強のフレームワーク<\/h3>\n\n<ul>\n<li>それまでの，社内フレームワーク<\/li>\n<li>鳴り物入りで登場した，当時最強のフレームワーク<\/li>\n<li>社内でも歓迎されたが……<\/li>\n<\/ul>\n\n<h3>最強のフレームワーク vs 最強の複数人開発<\/h3>\n\n<ul>\n<li>一人でメンテナンスする限界，そして，増える開発メンバー<\/li>\n<li>崩壊するコピペ3回ルールの行方とは……<\/li>\n<\/ul>\n\n<h3>継続デリバリー派の登場<\/h3>\n\n<ul>\n<li>毎週stagingブランチ作る派 vs stagingブランチはひとつでいいよ派<\/li>\n<li>続々出版される継続デリバリー，その全てがみんな知ってる内容であった……<\/li>\n<\/ul>\n\n<h3>ORMからの脱却，そして，ORMへの回帰<\/h3>\n\n<ul>\n<li>コピペされ続けるSQL<\/li>\n<li>さすがにこれはないじゃん感，その先に見た<code>Common::<\/code>ネームスペース<\/li>\n<\/ul>\n\n<h3>Service層の導入<\/h3>\n\n<ul>\n<li>コピペ解消層としてのService層と，その設計指針<\/li>\n<li>これオブジェクト指向ではないんでは説<\/li>\n<\/ul>\n\n<h3>オブジェクト指向入門<\/h3>\n\n<ul>\n<li>人類にはクラスは早すぎた<\/li>\n<li>オブジェクト指向入門を読んだ人間だけがインスタンスを作れる<\/li>\n<li>その実態は，ほぼ全てのメソッドをクラスメソッドで実装する暗黒時代であった<\/li>\n<\/ul>\n\n<h3>SQLからService層への変換<\/h3>\n\n<ul>\n<li>新しく書くときにちまちまリファクタリング<\/li>\n<li>機械的に書き換えるため，静的解析や，動的解析を導入<\/li>\n<li>必要に迫られてリファクタリングツールを開発 <code>App::PRT<\/code> (YAPC 2014参照)<\/li>\n<\/ul>\n\n<h3>そして，ドメイン駆動設計への道<\/h3>\n\n<ul>\n<li>Service層の再発見<\/li>\n<li>我々のアーキテクチャは10年前にEric Evansが発見していた<\/li>\n<li>社内でのDDD普及期，勉強会で得た知見<\/li>\n<\/ul>\n\n<h3>銀の弾丸を拾い続けた3年間を振り返って<\/h3>\n\n<ul>\n<li>現状に満足せず，常により良いアーキテクテクチャを考えることが重要<\/li>\n<li>なかなかよいペースで拾い続けることができた<\/li>\n<li>今後もはてなブログは最高のアーキテクチャであり続けます!!!!!!!!<\/li>\n<\/ul>\n","memo":"この発表に全てを賭けてます","start_on":"2015-08-21 14:20:00","created_on":"2015-06-15 23:50:31","material_level":"regular","subtitles":"ja","member_id":"ea0bf72c-135f-11e5-addc-d9f87d574c3a","abstract":"発表者は，この三年間はてなブログというイケてるPerlのサービスの開発に携ってきました…\r\n\r\nPerlの最新を追い求め続けた三年間でした…\r\n\r\nなにも分からず，SQLをコピペし続けた数ヶ月…\r\n\r\nつらいことも，たのしいことも，みんな分かちあったコードベース…\r\n\r\n救いを求め，藁にもすがる思いで，朝も夜も読み続けたオブジェクト指向入門……\r\n\r\n偶然発見して，これだと思ったドメイン駆動設計……\r\n\r\n苦しみの軌跡と，現在最高の設計を紹介します………!!!!!!!\r\n\r\n### 当時最強のフレームワーク\r\n\r\n- それまでの，社内フレームワーク\r\n- 鳴り物入りで登場した，当時最強のフレームワーク\r\n- 社内でも歓迎されたが……\r\n\r\n### 最強のフレームワーク vs 最強の複数人開発\r\n\r\n- 一人でメンテナンスする限界，そして，増える開発メンバー\r\n- 崩壊するコピペ3回ルールの行方とは……\r\n\r\n### 継続デリバリー派の登場\r\n\r\n- 毎週stagingブランチ作る派 vs stagingブランチはひとつでいいよ派\r\n- 続々出版される継続デリバリー，その全てがみんな知ってる内容であった……\r\n\r\n### ORMからの脱却，そして，ORMへの回帰\r\n\r\n- コピペされ続けるSQL\r\n- さすがにこれはないじゃん感，その先に見た`Common::`ネームスペース\r\n\r\n### Service層の導入\r\n\r\n- コピペ解消層としてのService層と，その設計指針\r\n- これオブジェクト指向ではないんでは説\r\n\r\n### オブジェクト指向入門\r\n\r\n- 人類にはクラスは早すぎた\r\n- オブジェクト指向入門を読んだ人間だけがインスタンスを作れる\r\n- その実態は，ほぼ全てのメソッドをクラスメソッドで実装する暗黒時代であった\r\n\r\n### SQLからService層への変換\r\n\r\n- 新しく書くときにちまちまリファクタリング\r\n- 機械的に書き換えるため，静的解析や，動的解析を導入\r\n- 必要に迫られてリファクタリングツールを開発 `App::PRT` (YAPC 2014参照)\r\n\r\n### そして，ドメイン駆動設計への道\r\n\r\n- Service層の再発見\r\n- 我々のアーキテクチャは10年前にEric Evansが発見していた\r\n- 社内でのDDD普及期，勉強会で得た知見\r\n\r\n### 銀の弾丸を拾い続けた3年間を振り返って\r\n\r\n- 現状に満足せず，常により良いアーキテクテクチャを考えることが重要\r\n- なかなかよいペースで拾い続けることができた\r\n- 今後もはてなブログは最高のアーキテクチャであり続けます!!!!!!!!","category":"app","duration":"60","sort_order":"0","tags":null,"language":"ja","title_en":"Three years on Perl ~ The technology to developing cool web service ~","video_permission":"allow","calendar_entry_id":null,"title":"Perlの上にも三年 〜 ずっとイケてるサービスを作り続ける技術 〜","is_confirmed":"1"},{"video_url":null,"has_interpratation":"0","photo_permission":"allow","modified_on":"2015-05-21 08:06:12","abstract_html":"<p>2013年2月にスタートしたmiyagawaさんによる <strong>Podcast<\/strong> 「 <em>Rebuild<\/em> 」はWebエンジニアを中心に人気メディアとなりました。僕自身もRebuildに影響を受け「 <em>だんごゆっけの平和な話<\/em> 」「 <em>wada.fm<\/em> 」という2つのPodcastを開始し現在でも配信中です。こうしたPodcastを成り立たせるには<\/p>\n\n<ul>\n<li><ol>\n<li>コンテンツとなる音の収録<\/li>\n<\/ol><\/li>\n<li><ol>\n<li>音の加工や収録データの形式を変換する作業など<\/li>\n<\/ol><\/li>\n<li><ol>\n<li>音声ファイル及びRSSフィードをWeb上で公開する（場合によっては番組サイトもつくる）<\/li>\n<\/ol><\/li>\n<\/ul>\n\n<p>この3つが必要になってきます。本トークでは <strong>まず<\/strong> 、僕が配信している2つのPodcastを事例に、上記最後の配信部分に焦点を当てつつ「Podcastを支える技術」について紹介します。<\/p>\n\n<p>さて、Rebuildが火付け役となり、WebやITエンジニア界隈では、僕を含めPodcastを聴いたり配信したりする人が増えたわけですが、技術的な側面を考えると <strong>枯れた<\/strong> ものを利用しているにとどまりません。mp3ファイルをURLで参照出来る場所に置いて、アドレスを書いたRSSフィードをWebサーバ上などから配信する <strong>だけ<\/strong> なのです。やろうと思えば、Appleの「iTunes Store」上へPodcastの番組を登録し番組をアピールすることが出来ますが、しなくても立派なPodcast。AppleとGoogleが握るモバイルアプリプラットフォームに縛られる必要なんて全く無いのです。<\/p>\n\n<p>この既成の「プラットフォーム」上メディアとPodcastでは、技術的にもアーキテクチャやインフラの側面としても「自分がどこまで面倒を見るか？」という意味合いで大きな乖離があります。Podcastの事例は、 <strong>MovableType<\/strong> を自分のサーバにインストールしていた時代のBlogにも言えることでしょう。例えば、昨今、Web技術の調べ事をしていると「 <strong>Qiita<\/strong> 」の記事がGoogleでヒットすることが多くなりました。dankogaiさんにBlogを通じてコードを「 <strong>勝手に添削<\/strong> 」された頃と比べると状況は変わってきている気がします。<\/p>\n\n<p>本トークではこのように、Podcast話を皮切りに、こうしたエンジニアの表現手段の仕組みがどのように変わりつつあるか？歴史的変遷を振り返ります。そして、今、どのように <strong>楽しむか？<\/strong> を考えてみたいと思います。「こんなコード書いたんだけどどう？」「知見たまった！」「俺のポエムを聞け！」我々はコードを書きつつもネットを通じて誰かに伝えたいことがあることでしょう。当の自分も、Blogいや、Web日記から始まり、メルマガ、雑誌や書籍の執筆、Kindle本の発売、そしてPodcastと様々な形態で発信してきました。これらの経験を元にコンテンツの表現方法を探ります。また、絶版？になってしまいましたが「Blog Hacks」という書籍が示す通りメディア配信のシステムを <strong>自らいじる<\/strong> 楽しさも存在しますね。<\/p>\n\n<p>最後に、 <strong>エンジニアならコードそのものも表現しよう！<\/strong> ってことでPerlの巨大ライブラリ置き場である <strong>CPAN<\/strong> や <strong>GitHub<\/strong> について言及します。これまたmiyagawaさんとのBlog上のやりとりで知って考えた、オーサーとユーザーがいる件、CPANのエコシステム、フリーライド問題などがテーマです。<\/p>\n\n<p>ちなみに、個別具体的な技術的トピックやコードの出現率が低いトークとなりますが、これらエンジニアのためのWebメディアの <strong>仕組み<\/strong> を事例と共に説明するので、特別「スピリチャルな」もしくは「エモい」トークには <strong>ならない<\/strong> と思われます！<\/p>\n\n<hr \/>\n\n<p>トピックリスト（予定）<\/p>\n\n<ul>\n<li>マイクには2種類ある<\/li>\n<li>オーディオI\/F<\/li>\n<li>Audacity、Levelator、lameで無料のポスプロ<\/li>\n<li>Media RSSという拡張<\/li>\n<li>Podcastの富豪的な配信の仕方とVPS1台だけで行なう方法<\/li>\n<li>フィードと静的サイトをつくるためのJekyll<\/li>\n<li>MovableTypeのパスワードがアレだった時代<\/li>\n<li><a href=\"http:\/\/event.shoeisha.jp\/devsumi\/20140213\/session\/402\/\">デブサミ2014「Webの現在過去未来」<\/a><\/li>\n<li>Web APIで巨人の肩に乗る<\/li>\n<li>Twitter API v1.0 廃止の件<\/li>\n<li>まぐまぐの仕組み<\/li>\n<li>書籍のつくり方<\/li>\n<li>AWSをオンプレの構図にも似てる件<\/li>\n<li>ePubフォーマットとmobiフォーマット<\/li>\n<li><a href=\"http:\/\/search.cpan.org\/dist\/App-mookview\/\">App::mookview<\/a><\/li>\n<li><a href=\"http:\/\/yusukebe.com\/archives\/20090912\/120113.html\">Where are &quot;Casual Perlers&quot; ? - ゆーすけべー日記<\/a><\/li>\n<li><a href=\"http:\/\/bulknews.typepad.com\/blog\/2009\/09\/on-module-writers-and-users.html\">On module writers and users - bulknews.typepad.com<\/a><\/li>\n<li>Web上でのプレゼンスを発揮することの意味<\/li>\n<li>GitHubの時代<\/li>\n<li>pull-requestが来たと思ったらその人のBlogでソフトウェアが紹介された件<\/li>\n<li><a href=\"http:\/\/perltricks.com\/article\/145\/2015\/1\/15\/The-best-of-what-s-new-on-CPAN-2014\">The best of what's new on CPAN 2014<\/a><\/li>\n<li>RESTfulとURI<\/li>\n<li>facebook.comは万人に同じリソースを表しているといえるか？<\/li>\n<li>はてなブックマークの功罪、主に功<\/li>\n<\/ul>\n","memo":null,"slide_url":"http:\/\/www.slideshare.net\/yusukebe\/podcastwebcpan","venue_id":"5","speaker":{"nickname":"Yusuke Wada","id":"fd3f7cb2-fa9e-11e4-87f0-8ab37d574c3a","name":"Yusuke Wada","profile_image_url":"http:\/\/graph.facebook.com\/631255029\/picture"},"id":"cf39f7fc-ff44-11e4-9264-66c47d574c3a","status":"accepted","tags":null,"language":"ja","title_en":"Podcasting,  Media for Web Engineer, and CPAN","video_permission":"allow","calendar_entry_id":null,"title":"Podcastを支える技術、エンジニアのためのWebメディア、そしてCPAN","is_confirmed":"1","start_on":"2015-08-21 15:30:00","created_on":"2015-05-21 08:06:12","material_level":"beginner","subtitles":"ja","member_id":"fd3f7cb2-fa9e-11e4-87f0-8ab37d574c3a","abstract":"2013年2月にスタートしたmiyagawaさんによる **Podcast** 「 *Rebuild* 」はWebエンジニアを中心に人気メディアとなりました。僕自身もRebuildに影響を受け「 *だんごゆっけの平和な話* 」「 *wada.fm* 」という2つのPodcastを開始し現在でも配信中です。こうしたPodcastを成り立たせるには\r\n\r\n* 1. コンテンツとなる音の収録\r\n* 2. 音の加工や収録データの形式を変換する作業など\r\n* 3. 音声ファイル及びRSSフィードをWeb上で公開する（場合によっては番組サイトもつくる）\r\n\r\nこの3つが必要になってきます。本トークでは **まず** 、僕が配信している2つのPodcastを事例に、上記最後の配信部分に焦点を当てつつ「Podcastを支える技術」について紹介します。\r\n\r\nさて、Rebuildが火付け役となり、WebやITエンジニア界隈では、僕を含めPodcastを聴いたり配信したりする人が増えたわけですが、技術的な側面を考えると **枯れた** ものを利用しているにとどまりません。mp3ファイルをURLで参照出来る場所に置いて、アドレスを書いたRSSフィードをWebサーバ上などから配信する **だけ** なのです。やろうと思えば、Appleの「iTunes Store」上へPodcastの番組を登録し番組をアピールすることが出来ますが、しなくても立派なPodcast。AppleとGoogleが握るモバイルアプリプラットフォームに縛られる必要なんて全く無いのです。\r\n\r\nこの既成の「プラットフォーム」上メディアとPodcastでは、技術的にもアーキテクチャやインフラの側面としても「自分がどこまで面倒を見るか？」という意味合いで大きな乖離があります。Podcastの事例は、 **MovableType** を自分のサーバにインストールしていた時代のBlogにも言えることでしょう。例えば、昨今、Web技術の調べ事をしていると「 **Qiita** 」の記事がGoogleでヒットすることが多くなりました。dankogaiさんにBlogを通じてコードを「 **勝手に添削** 」された頃と比べると状況は変わってきている気がします。\r\n\r\n本トークではこのように、Podcast話を皮切りに、こうしたエンジニアの表現手段の仕組みがどのように変わりつつあるか？歴史的変遷を振り返ります。そして、今、どのように **楽しむか？** を考えてみたいと思います。「こんなコード書いたんだけどどう？」「知見たまった！」「俺のポエムを聞け！」我々はコードを書きつつもネットを通じて誰かに伝えたいことがあることでしょう。当の自分も、Blogいや、Web日記から始まり、メルマガ、雑誌や書籍の執筆、Kindle本の発売、そしてPodcastと様々な形態で発信してきました。これらの経験を元にコンテンツの表現方法を探ります。また、絶版？になってしまいましたが「Blog Hacks」という書籍が示す通りメディア配信のシステムを **自らいじる** 楽しさも存在しますね。\r\n\r\n最後に、 **エンジニアならコードそのものも表現しよう！** ってことでPerlの巨大ライブラリ置き場である **CPAN** や **GitHub** について言及します。これまたmiyagawaさんとのBlog上のやりとりで知って考えた、オーサーとユーザーがいる件、CPANのエコシステム、フリーライド問題などがテーマです。\r\n\r\nちなみに、個別具体的な技術的トピックやコードの出現率が低いトークとなりますが、これらエンジニアのためのWebメディアの **仕組み** を事例と共に説明するので、特別「スピリチャルな」もしくは「エモい」トークには **ならない** と思われます！\r\n\r\n---\r\n\r\nトピックリスト（予定）\r\n\r\n* マイクには2種類ある\r\n* オーディオI\/F\r\n* Audacity、Levelator、lameで無料のポスプロ\r\n* Media RSSという拡張\r\n* Podcastの富豪的な配信の仕方とVPS1台だけで行なう方法\r\n* フィードと静的サイトをつくるためのJekyll\r\n* MovableTypeのパスワードがアレだった時代\r\n* [デブサミ2014「Webの現在過去未来」](http:\/\/event.shoeisha.jp\/devsumi\/20140213\/session\/402\/)\r\n* Web APIで巨人の肩に乗る\r\n* Twitter API v1.0 廃止の件\r\n* まぐまぐの仕組み\r\n* 書籍のつくり方\r\n* AWSをオンプレの構図にも似てる件\r\n* ePubフォーマットとmobiフォーマット\r\n* [App::mookview](http:\/\/search.cpan.org\/dist\/App-mookview\/)\r\n* [Where are &quot;Casual Perlers&quot; ? - ゆーすけべー日記](http:\/\/yusukebe.com\/archives\/20090912\/120113.html)\r\n* [On module writers and users - bulknews.typepad.com](http:\/\/bulknews.typepad.com\/blog\/2009\/09\/on-module-writers-and-users.html)\r\n* Web上でのプレゼンスを発揮することの意味\r\n* GitHubの時代\r\n* pull-requestが来たと思ったらその人のBlogでソフトウェアが紹介された件\r\n* [The best of what's new on CPAN 2014](http:\/\/perltricks.com\/article\/145\/2015\/1\/15\/The-best-of-what-s-new-on-CPAN-2014)\r\n* RESTfulとURI\r\n* facebook.comは万人に同じリソースを表しているといえるか？\r\n* はてなブックマークの功罪、主に功\r\n","category":"other","sort_order":"0","duration":"60"}],[{"member_id":"1c5af0e4-f4b5-11e4-9741-1eb37d574c3a","subtitles":"none","material_level":"regular","created_on":"0000-00-00 00:00:00","start_on":"2015-08-21 18:00:00","duration":"180","sort_order":"0","category":"other","abstract":"YAPC::Asia Tokyo の醍醐味は様々な人との出会いです！600人分の懇親会を用意しましたので是非いらしてください。\r\n懇親会は無料ですが、人数制限を行うため *TBA* から登録してください（近日中にリンクを用意します）\r\nトークが採用されている方は登録の必要はありません。\r\n\r\n懇親会は DeNA様とエンジャパン様の提供でお送りしています！ありがとうございます！\r\n\r\n----\r\n\r\nCome mingle with the crowd! We have room for 600 people!\r\nThis is a free event, but you must register to this at *TBA* (link will be available soon). If you are a speaker, you're automatically invited, please do not register.\r\n\r\nThis event is sponsored by DeNA and EN Japan! Thank you, sponsors!","video_permission":"disallow","title_en":"Conference Dinner","language":"ja","tags":null,"is_confirmed":"1","title":"懇親会","calendar_entry_id":null,"id":"ae1cce86-1874-11e5-aca1-525412004261","status":"accepted","speaker":{"name":"Daisuke Maki","profile_image_url":"http:\/\/pbs.twimg.com\/profile_images\/1223562029\/DSC00001_normal.JPG","id":"1c5af0e4-f4b5-11e4-9741-1eb37d574c3a","nickname":"lestrrat"},"venue_id":"6","slide_url":null,"photo_permission":"allow","has_interpratation":"0","video_url":null,"memo":null,"abstract_html":"<p>YAPC::Asia Tokyo の醍醐味は様々な人との出会いです！600人分の懇親会を用意しましたので是非いらしてください。\n懇親会は無料ですが、人数制限を行うため <em>TBA<\/em> から登録してください（近日中にリンクを用意します）\nトークが採用されている方は登録の必要はありません。<\/p>\n\n<p>懇親会は DeNA様とエンジャパン様の提供でお送りしています！ありがとうございます！<\/p>\n\n<hr \/>\n\n<p>Come mingle with the crowd! We have room for 600 people!\nThis is a free event, but you must register to this at <em>TBA<\/em> (link will be available soon). If you are a speaker, you're automatically invited, please do not register.<\/p>\n\n<p>This event is sponsored by DeNA and EN Japan! Thank you, sponsors!<\/p>\n","modified_on":"2015-06-22 09:21:52"}]],"venues":[{"name":"トラックA 国際会議場","id":1,"hashtag":"#yapcasiaA"},{"name":"トラックB (701-702)","hashtag":"#yapcasiaB","id":2},{"name":"トラックC (703)","id":3,"hashtag":"#yapcasiaC"},{"name":"トラックD (605-606)","hashtag":"#yapcasiaD","id":4},{"hashtag":"#yapcasiaE","id":5,"name":"トラックE (607-608)"},{"name":"レセプションホール 1F","id":6,"hashtag":"#yapcasiaDinner"}],"events_by_venue":[[],[],[],[],[],[]],"date":"2015-08-21","venue_id2name":{"5":"トラックE (607-608)","1":"トラックA 国際会議場","4":"トラックD (605-606)","3":"トラックC (703)","2":"トラックB (701-702)","6":"レセプションホール 1F"}}